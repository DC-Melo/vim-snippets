priority -50

global !p
import vim

# Tests for the existence of a variable declared by Vim's filetype detection
# suggesting the type of shell script of the current file
def testShell(scope, shell):
	return vim.eval("exists('" + scope + ":is_" + shell + "')")

# Loops over the possible variables, checking for global variables
# first since they indicate an override by the user.
def getShell():
	for scope in ["g", "b"]:
		for shell in ["bash", "posix", "sh", "kornshell"]:
			if testShell(scope, shell) == "1":
				if shell == "kornshell":
					return "ksh"
				if shell == "posix":
					return "sh"
				return shell
	return "sh"
endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################

snippet forLoopList "for loop list of  string" b
# https://linuxhint.com/bash_loop_list_strings/
# Example-1: Iterating a string of multiple words within for loop
#!/bin/bash
# Read a string with spaces using for loop
for value in I like programming
do
    echo $value
done

# Example-2: Iterating a string variable using for loop
#!/bin/bash
# Define a string variable with a value
StringVal="Welcome to linuxhint"
# Iterate the string variable using for loop
for val in $StringVal; do
    echo $val
done

# Example-3: Iterate an array of string values
#!/bin/bash
# Declare an array of string with type
declare -a StringArray=("Linux Mint" "Fedora" "Red Hat Linux" "Ubuntu" "Debian" )
# Iterate the string array using for loop
for val in ${StringArray[@]}; do
   echo $val
done

# Example-4: Print multiple words string value as a single value
#!/bin/bash
# Declare a string array with type
declare -a StringArray=("Windows XP" "Windows 10" "Windows ME" "Windows 8.1"
"Windows Server 2016" )
# Read the array values with space
for val in "${StringArray[@]}"; do
  echo $val
done


# Example-5: Iterating string values of an array using ‘*’
#!/bin/bash
#Declare a string array
LanguageArray=("PHP"  "Java"  "C#"  "C++"  "VB.Net"  "Python"  "Perl")
# Print array values in  lines
echo "Print every element in new line"
for val1 in ${LanguageArray[*]}; do
     echo $val1
done
echo ""
# Print array values in one line
echo "Print all elements in a single line"
for val2 in "${LanguageArray[*]}"; do
    echo $val2
done
echo ""

# Example-6: Iterating comma separated string values
#!/bin/bash
DataList=" HTML5, CCS3, BootStrap, JQuery "
Field_Separator=$IFS
# set comma as internal field separator for the string list
IFS=,
for val in $DataList;
do
echo $val
done
IFS=$Field_Separator

# Example-7: Reading multiple string arrays together
#! /bin/sh
str_array1=("Magento 2.2.4" "WooCommerce")
str_array2=("CodeIgnitor" "Laravel")
combine=(str_array1 str_array2)
for arrItem in ${combine[@]}
do
   eval 'for val in "${'$arrItem'[@]}";do echo "$val";done'
done

# Example-8: Using pattern to read the list of strings
#! /bin/sh
# Define a list of string variable
stringList=WordPress,Joomla,Magento
# Use comma as separator and apply as pattern
for val in ${stringList//,/ }
do
   echo $val
done
$0
endsnippet

snippet gitpush "git add ,commit, push" b
git add .
git commit -m "DC"
git push gitee
git push github
$0
endsnippet


snippet gitClone "git clone " b
git clone https://gitee.com/dc-melo/README "new folder"
$0
endsnippet

snippet gitRepoClear "repo clear " b
curl -X PUT --header 'Content-Type: application/json;charset=UTF-8' 'https://gitee.com/api/v5/repos/owenr/repo/clear' -d '{"access_token":"84ace52bd1bd6f087f72c9666bda3026"}'
$0
endsnippet

snippet gitRepoDelete "repo delete" b
curl -X PUT --header 'Content-Type: application/json;charset=UTF-8' 'https://gitee.com/api/v5/repos/owenr/repo/clear' -d '{"access_token":"84ace52bd1bd6f087f72c9666bda3026"}'
$0
endsnippet

snippet gitRepoCreate "repo create" b
generate_post_data()
{
  cat <<EOF
{
  "account": {
    "email": "$email",
    "screenName": "$screenName",
    "type": "$theType",
    "passwordSettings": {
      "password": "$password",
      "passwordConfirm": "$password"
    }
  },
  "firstName": "$firstName",
  "lastName": "$lastName",
  "middleName": "$middleName",
  "locale": "$locale",
  "registrationSiteId": "$registrationSiteId",
  "receiveEmail": "$receiveEmail",
  "dateOfBirth": "$dob",
  "mobileNumber": "$mobileNumber",
  "gender": "$gender",
  "fuelActivationDate": "$fuelActivationDate",
  "postalCode": "$postalCode",
  "country": "$country",
  "city": "$city",
  "state": "$state",
  "bio": "$bio",
  "jpFirstNameKana": "$jpFirstNameKana",
  "jpLastNameKana": "$jpLastNameKana",
  "height": "$height",
  "weight": "$weight",
  "distanceUnit": "MILES",
  "weightUnit": "POUNDS",
  "heightUnit": "FT/INCHES"
}
EOF
}
curl -i \
-H "Accept: application/json" \
-H "Content-Type:application/json" \
-X POST --data "$(generate_post_data)" "https://xxx:xxxxx@xxxx-www.xxxxx.com/xxxxx/xxxx/xxxx"


curl -X PUT --header 'Content-Type: application/json;charset=UTF-8' 'https://gitee.com/api/v5/repos/owenr/repo/clear' -d '{"access_token":"84ace52bd1bd6f087f72c9666bda3026"}'
name="name"; des="description"; 
curl -X POST --header 'Content-Type: application/json;charset=UTF-8' 'https://gitee.com/api/v5/user/repos' -d '{"access_token":"'"${GITEE_TOKEN}"'","name":"'"${name}"'","description":"'"${des}"'","private":"false","homepage":"http://www.dc-melo.com","has_issues":"true","has_wiki":"true","can_comment":"true","auto_init":"false","license_template":"MIT"}'; 
curl -u $GITHUB_USER:$GITHUB_TOKEN https://api.github.com/user/repos -d '{"name":"'"${name}"'","description":"'"${des}"'","private":"false"}'; 
git clone git@gitee.com:dc-melo/${name}.git
$0
endsnippet

snippet gitRepoUpdate "repo update" b
curl -X PATCH --header 'Content-Type: application/json;charset=UTF-8' 'https://gitee.com/api/v5/repos/ower/repo' -d '{"access_token":"84ace52bd1bd6f087f72c9666bda3026","name":"name","has_issues":"true","has_wiki":"true","can_comment":"true"}'
$0
endsnippet

snippet gitRepoList "repo List" b
curl -X PATCH --header 'Content-Type: application/json;charset=UTF-8' 'https://gitee.com/api/v5/repos/ower/repo' -d '{"access_token":"84ace52bd1bd6f087f72c9666bda3026","name":"name","has_issues":"true","has_wiki":"true","can_comment":"true"}'
$0
endsnippet

snippet gitRepoInfo "repo Info" b
curl -X PATCH --header 'Content-Type: application/json;charset=UTF-8' 'https://gitee.com/api/v5/repos/ower/repo' -d '{"access_token":"84ace52bd1bd6f087f72c9666bda3026","name":"name","has_issues":"true","has_wiki":"true","can_comment":"true"}'
$0
endsnippet

snippet iconvgbk2utf "iconv -f gbk -t utf-8 file" b
iconv -f gbk -t utf-8 1.txt > 2.txt
$0
endsnippet

snippet ffmpegVideo2Gif "video to gif convert" b
ffmpeg -ss 00:00:10 -t 3  -i test.mp4 -s  300x400 -r 15 test.gif -y // 从视频中第10秒开始，截取时长为3秒的片段,size 300*400 -r 视频提取15帧
convert output_video.gif -fuzz 20% -layers Optimize output_video2.gif
$0
endsnippet

snippet convList "image to gif" b
# USEFUL IMAGEMAGICK INFORMATION COMMANDS
convert -list               # list all functions
convert -list list          # list all -list options
convert -list channel       # list of all image -channel options
convert -list command       # list all commands
convert -list color         # list of all color names and values
convert -list colorspace    # list of all -colorspace options
convert -list compose       # list of all -compose options
convert -list configure     # list of your IM version information
convert -list decoration    # list of all text decorations
convert -list filter        # list of all -filter options
convert -list font          # list of all supported fonts (on your system)
convert -list format        # list of all image formats
convert -list gravity       # list of all -gravity positioning options
convert -list primitive     # list of all -draw primitive shapes
convert -list style         # list of all text styles
convert -list threshold     # list of all dither/halftone options
convert -list type          # list of all image types
convert -list virtual-pixel # list of all -virtual-pixel options
$0
endsnippet

snippet convImg2Gif "image to gif" b
convert -delay 100 *.png -loop 0  test.gif
# -delay n 迟延n*10毫秒 -loop n 播放n轮, 0表示不断地重复播放
convert -delay 400 -dispose background *.jpg -resize 668x476  -gravity Center -background white -extent 668x476 -loop 0  ani.gif
$0
endsnippet

snippet convdrawheart "convert draw heart" b
convert +antialias -size 80x80 -gravity center \
	-font WebDings label:Y   heart.gif
$0
endsnippet

snippet convdrawrrect "convert draw rect" b
convert -size 100x60 xc:skyblue -fill white -stroke black \
	-draw "roundrectangle 20,10 80,50 20,15"  draw_rrect.gif
$0
endsnippet

snippet convdWords2Gif "convert words to gif" b
convert -size 100x60 xc:skyblue -fill white -stroke black \
	-font Candice -pointsize 40 -gravity center \
	-draw "text 0,0 'Hello'"   draw_text.gif
$0
endsnippet

snippet convdWords2Gif "convert words to gif" b
convert lena.jpg -fill white -font arial -pointsize 24 -gravity center -annotate +0+100 "testing" lena_text1.jpg
convert lena.jpg -fill white -font arial -pointsize 24 -gravity center -annotate +0+75 "testing" lena_text2.jpg
convert lena.jpg -fill white -font arial -pointsize 24 -gravity center -annotate +0+50 "testing" lena_text3.jpg
convert lena.jpg -fill white -font arial -pointsize 24 -gravity center -annotate +0+25 "testing" lena_text4.jpg
convert lena.jpg -fill white -font arial -pointsize 24 -gravity center -annotate +0+0 "testing" lena_text5.jpg
convert -delay 50 lena_text*.jpg -loop 0 -layers optimize lena_anim.gif
convert -delay 50 lena_text*.jpg ( -clone 0--1 -reverse ) -loop 0 -layers optimize lena_anim2.gif
$0
endsnippet

snippet convdrawtext "convert draw text" b
convert -size 100x60 xc:skyblue -fill white -stroke black \
	-font Candice -pointsize 40 -gravity center \
	-draw "text 0,0 'Hello'"   draw_text.gif
$0
endsnippet


snippet findSed "find file and sed file" b
find . -iname '*.java' -type f -exec sed -i 's/old/REPLACEMENT/g' {} +;
$0
endsnippet
snippet findVim "find file and vim file" b
find . -iname '*.py'   -type f -exec vim -c '%s/PATTERN/REPLACEMENT/gc' -c 'wq' {} \;
$0
endsnippet

snippet findUnzip "find zip and unzip file" b
find . -iname '*.zip'  -type f -exec bash -c 'cd \`dirname ${1}\`  && unzip -d dir \`basename ${1}\`' _ {} \;
$0
endsnippet

snippet unzip "find zip and unzip file" b
1、把文件解压到当前目录下
unzip file.zip
2、如果要把文件解压到指定的目录下，需要用到-d参数。
unzip -d ./tmp/ file.zip
3、解压的时候，有时候不想覆盖已经存在的文件，那么可以加上-n参数
unzip -n file.zip
unzip -n -d ./tmp/ file.zip
4、只看一下zip压缩包中包含哪些文件，不进行解压缩
unzip -l file.zip
5、查看显示的文件列表还包含压缩比率
unzip -v file.zip
6、检查zip文件是否损坏
unzip -t file.zip
7、将压缩文件file.zip在指定目录tmp下解压缩，如果已有相同的文件存在，要求unzip命令覆盖原先的文件
unzip -o file.zip -d ./tmp
$0
endsnippet

snippet findGrepGrep "find file and grep and grep file" b
find . -iname 'name' -type f -exec grep -q FIND {} \; -exec grep -l ME {} \;
$0
endsnippet
snippet findRenameByIndex "find file and rename by index" b
find file and rename by index
$0
endsnippet
snippet findRenameBySubs "find file and rename by substitute" b
find file and rename by substitute
$0
endsnippet
snippet findInumMv "find by inum file and rename file" b
find . -maxdepth 1 -inum 000  -exec mv {} newname \;
$0
endsnippet
snippet grepFormwork "grep formwork" b
grep -irn --include="*.py" --include="*.java" --include="*.go" --exclude-dir={proc,boot,build} "" .
$0
endsnippet
snippet grepSed "grep sed" b
grep -irl '' . | xargs sed -i 's/old/new/g'
$0
endsnippet
snippet grepVimSubstitute "grep vim substitute" b
grep -irl 'pattern' -exec vim -c '%s/PATTERN/REPLACEMENT/gc' -c 'wq' {} \;
$0
endsnippet
snippet findGrepGOBuild "find go main file and build it" b
find .  -name '*.go' -type f -exec bash -c 'grep -iq "func main" "${1}" && cd `dirname ${1}` && go build' _ {} \;
$0
endsnippet
snippet findCat "find file and concatenate file" b
find . -iname "*.md" -exec cat  {} + >> README.md
find . -iname "*.md" -exec more {} + >> README.md
find . -iname "*.md" -printf '\n:::::::\n%p\n::::::\n' -exec cat {} \\; > README.md
find . -iname "*.md" -exec head {} + >> README.md
find . -iname "*.md" -exec head {} + >> README.md
$0
endsnippet
snippet findSortCat "find file and concatenate file" b
find . -type f -print0 | sort -z | xargs -r0 more > sha256SumOutput
$0
endsnippet
snippet findMove "find file and move remove file" b
find . -type f -iname '*.cpp' -exec mv {} ./test/ \;
find . -type f -iname "*FILE-TO-FIND*" -exec rm -rf {} \;
$0
endsnippet
snippet printf2file "print string to file" b
printf '' | xsel -i -b
printf '' > /tmp/registeri
$0
endsnippet
snippet rsyncFormwork "rsync file formwork" b
rsync -avzP --delete dc@test0:/home/dc/5W/LeetCode_1000/ ~/5W/LeetCode_1000
$0
endsnippet
snippet removeSecurely "Securely remove" b
shred -zuv file	# Securely remove your file by overwritting then removing
$0
endsnippet
snippet pasteColumn "paste column joins files column-wise fashion" b
paste -d";" file1.txt file2.txt
paste joins files together in a column-wise fashion. Another way to think about this is in contrast to cat, which joins files vertically. For example:
$0
endsnippet
snippet aliasFormwork "alias Formwork" b
alias cp="cp -R"
$0
endsnippet
snippet viewColumn "view file space as column" b
cat myfile.txt | column -t
# Suppose you have a file with fields of variable length. Viewing it in the terminal can be messy because, if a field in one row is longer than one in another, it will upset the spacing of the columns. You can remedy this as follows:
$0
endsnippet
snippet splitFile "split file by lines" b
split -l 3 -d test.txt test_split_
# If we want to split this file into sub-files with 3 lines each, we can use:
$0
endsnippet
snippet securityFile "security File" b
gpg --full-generate-key
# Here are the basics about gpg. The first thing to do is to generate a public/private key pair for yourself:
$0
endsnippet

snippet collapseRows "Rounded Rectangle" b
cat file.txt | datamash -g 1 collapse 2 -s -W
# Collapse rows in one column based on a common ID in another column:
# GNU datamash is a great program for crunching through text files and collapsing rows on a common ID or computing basic statistics. Here are some simple examples of what it can do.
$0
endsnippet
snippet listDir "list directorys" b
ls -dtalh */ 
$0
endsnippet
snippet listDirFirst "list directorys first" b
\`ls -dtah */ | head -1\`
$0
endsnippet
snippet listDirLast "list directorys last" b
\`ls -dtah */ | tail -1\`
$0
endsnippet
snippet listFile "list file" b
ls -ptalh . | grep -v /
$0
endsnippet
snippet listFileFirst "list file first" b
\`ls -ptah . | grep -v / | head -1\`
$0
endsnippet
snippet listFileLast "list file last" b
\`ls -ptah . | grep -v / |tail -1\`
$0
endsnippet

snippet wgetUrl "wget url file" b
wget -c "www.baidu.com" -O baidu.index.html -o wget.log
$0
endsnippet

snippet xlsx2csv "excel convert to csv" b
for file in *.xlsx; do
    nombre=${file:0:${#file}-5};
    name="$nombre-%n-%s.csv";
    ssconvert --export-type=Gnumeric_stf:stf_csv --export-file-per-sheet ${file} ${name};
done
echo "Finish!"
$0
endsnippet

snippet snipTestShell "snip test shell" b
clear
ls -al
jobs -l
$0
endsnippet

# vim:ft=snippets:
