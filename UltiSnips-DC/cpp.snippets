priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49
###########################################################################
#			    Global functions 						  #
###########################################################################

global !p

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]


endglobal
###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet listnodeStruct "int listlode struct formwork"
/* code by 王江 DC-Melo */
struct ListNode{
    int data;
    ListNode* next;
    ListNode(int x):data(x),next(NULL) {}
};
$0
endsnippet

snippet mainSolutionFW "main and solution"
/* code by 王江 DC-Melo */
// #include <bits/stdc++.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include "math.h"
#include <string>
#include <set>
#include <sstream>
#include <cstring>
#include <ctime>
#include <vector>
#include <iostream>
#include <unordered_map>
#include <chrono>
using namespace std;
class Solution
{
public:
    Solution() {}
    ~Solution() {}
private:
};
int main() {
	/* timestamp begin */
    auto tBegin = std::chrono::high_resolution_clock::now();
	/* code heer */

	/* timestamp end */
    auto tEnd = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::microseconds>( tEnd - tBegin).count();
    std::cout << "program cust " <<  duration <<" microseconds" << std::endl;
    return 0;
}
$0
endsnippet

snippet initArray "array init"
// Initializing a array
int ${1:input}[] = { 1, 2, 3, 4, 5 };
// loop through the array elements
for (size_t i = 0; i < sizeof($1)/sizeof($1[0]); i++) std::cout << $1[i] << ' '; std::cout << endl; 
// Print contents of an array in C++ using range-based for-loop
for (const auto &value: input)  std::cout << value << ' '; std::cout << endl; 
// Print contents of an array in C++ using iterators
for (auto it = std::cbegin(input); it != std::cend(input); it++) std::cout << *it << ' ';std::cout << endl; 
// Print contents of an array in C++ using `std::for_each`
std::for_each(std::begin(input), std::end(input), print);
$0
endsnippet

snippet initMatrix "matrix init"
// Initializing a 2D Vector i.e. vector of vectors
vector<vector<int>> matrix = {  {1, 2, 3, 4, 5  },
								{6, 7, 8, 9, 10 },
								{5, 6, 8, 1, 12 },
								{1, 7, 2, 4, 18 },
							 };
// Print 2D vector / matrix
for_each(matrix.begin(), matrix.end(),
	[](const auto & row ) {
		for_each(row.begin(), row.end(),
				[](const auto & elem){
					cout<<elem<<", ";
				});
		cout<<endl;
	});
cout<<endl;
int array[3][4] = {1,1,2,3,4,5,6,7,8,9,0,10}
$0
endsnippet


snippet initListNode "init list node"
head = new ListNode(0);
node1 = new ListNode(1);
node2 = new ListNode(2);
node3 = new ListNode(3);
head->next = node1;   
node1->next =node2;
node2->next =node3;

ListNode *ptr =head;
while(ptr!=NULL){
	cout<<ptr->data<<endl;
	ptr = ptr->next;
}
$0
endsnippet
