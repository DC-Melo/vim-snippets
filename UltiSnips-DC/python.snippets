priority -50

###########################################################################
#                            TEXTMATE SNIPPETS                            #
###########################################################################

snippet withopen "with open system argv[1]" b
with open(sys.argv[1],'r',encoding='utf-8-sig') as f:
	all_line_list = f.readlines()
$0
endsnippet

snippet translatePython "translate python script" b
#!/usr/bin/env python
# coding=utf-8

from urllib import request, parse
import json
import sys
 
def fanyi(content):
    req_url = 'http://fanyi.youdao.com/translate'
    head_data = {}
    head_data['Referer'] = 'http://fanyi.youdao.com/'
    head_data['User-Agent'] = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36X-Requested-With: XMLHttpRequest'
    form_data = {}
    form_data['i'] = content
    form_data['doctype'] = 'json'
    data = parse.urlencode(form_data).encode('utf-8')
    req = request.Request(req_url, data, head_data)
    response = request.urlopen(req)
    html = response.read().decode('utf-8')
    translate_results = json.loads(html)
    translate_results = translate_results['translateResult'][0][0]['tgt']
    # print(translate_results)
    return translate_results
 
if __name__ == '__main__':
    with open(sys.argv[1], "r") as f: #.txt的位置
        lines = f.readlines()
    for line in lines:
        eng=fanyi(line)
        print(eng)
    f.close()
$0
endsnippet


snippet decoratorFormwork "decorator Formwork" b
def decorator(f):
    """TODO: Docstring for decorator.
    :arg1: TODO
    :returns: TODO
    """
    def wraper( *args, **kwargs,):
        """TODO: Docstring for wraper.
        :returns: TODO
        """
        f( *args, **kwargs,)
    return wraper
$0
endsnippet

snippet iteratorFormwork "iterator Formwork" b
#!/usr/bin/env python
# coding=utf-8
class Fib(object):

    """Docstring for Fib. """

    def __init__(self,n):
        """TODO: to be defined. """
        self.prev = 0
        self.cur = 1
        self.n = n
    def __iter__(self):
        return self

    def __next__(self):
        if self.n > 0:
           self.prev, self.cur = self.cur, self.cur + self.prev
           self.n -= 1
           return self.cur
        else:
            raise StopIteration()
$0
endsnippet

snippet generatorFormwork "Generator Formwork" b
#!/usr/bin/env python
# coding=utf-8
def fibonacci(arg1):
    """TODO: Docstring for fibonacci.

    :arg1: TODO
    :returns: TODO

    """
    a,b = 0,1
    for i in range(arg1):
        yield b
        a,b = b,a+b
$0
endsnippet

snippet mapFormwork "map Python" b
def f(x):
    return x * x
r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])
$0
endsnippet

snippet reduceFormwork "reduce Python" b
# reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)
from functools import reduce
def add(x, y):
    return x + y
reduce(add, [1, 3, 5, 7, 9])
$0
endsnippet


snippet filterFormwork "filter Python" b
def is_odd(n):
    return n % 2 == 1

list(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15]))
$0
endsnippet

snippet sortFormwork "sort Python" b
L = [('Bob', 75), ('Adam', 92), ('Bart', 66), ('Lisa', 88)]
def by_name(t):
    pass

L2 = sorted(L, key=by_name)
print(L2)


from operator import itemgetter

L = ['bob', 'about', 'Zoo', 'Credit']

print(sorted(L))
print(sorted(L, key=str.lower))

students = [('Bob', 75), ('Adam', 92), ('Bart', 66), ('Lisa', 88)]

print(sorted(students, key=itemgetter(0)))
print(sorted(students, key=lambda t: t[1]))
print(sorted(students, key=itemgetter(1), reverse=True))
$0
endsnippet

snippet lambdaFormwork "lambda Formwork" b
list(map(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9]))
$0
endsnippet

snippet snipTestPython "snip Test Python" b
snip Test Python
$0
endsnippet
# vim:ft=snippets:

