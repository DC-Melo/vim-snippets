::::::::::::::
Template/Binary_Index_Tree/BIT.cpp
::::::::::::::
class BIT{
    public:
    int N;    
    vector<long long>bitArr; // Note: all arrays are 1-index
    vector<long long>nums;
    long long M = 1e9+7;
    
    BIT(int N)
    {
        this->N = N;
        bitArr.resize(N+1);
        nums.resize(N+1);        
    }

    // increase nums[i] by delta
    void updateDelta(int i, long long delta) {
        int idx = i;
        while (idx <= N)
        {
            bitArr[idx]+=delta;
            bitArr[idx] %= M;
            idx+=idx&(-idx);
        }
    }

    // sum of a range nums[1:j] inclusively
    long long queryPreSum(int idx){
        long long result = 0;
        while (idx){
            result += bitArr[idx];
            result %= M;
            idx-=idx&(-idx);
        }
        return result;
    }

    // sum of a range nums[i:j] inclusively
    long long sumRange(int i, int j) {    
        return queryPreSum(j)-queryPreSum(i-1);
    } 
};

int main()
{
    int N = 100000;
    BIT bit(N);
    vector<int>nums(N);
    // cin>> nums ....
    
    for (int i=1; i<nums.size(); i++) {
        bit.updateDelta(i, nums[i]);
        cout << bit.sumRange(1,i);
    }
}
::::::::::::::
Template/Bit_manipulation/bitset.cpp
::::::::::::::
bitset<100>bs; // define a bitset type variable

std::string str = std::bitset<32>(n).to_string(); // convert an integer n to bitset type, and then to string type

bs.set(); // make every bit as 1

bs.count(); // count the number of 1-bits in bs
::::::::::::::
Template/Bit_manipulation/Count_bit_1_numbers.cpp
::::::::::::::
__builtin_popcount(state)
::::::::::::::
Template/Bit_manipulation/Gospers-Hack.cpp
::::::::::::::
// Iterate all the m-bit state where there are k 1-bits.

int state = (1 << k) - 1;            
while (state < (1 << m))
{
    doSomething(state);

    int c = state & - state;
    int r = state + c;
    state = (((r ^ state) >> 2) / c) | r;
}
::::::::::::::
Template/Bit_manipulation/Iterate_Subsets.cpp
::::::::::::::
for (int subset=state; subset>0; subset=(subset-1)&state)
{
   DoSomething(subset);
}
::::::::::::::
Template/Combination-Number/comb.cpp
::::::::::::::
typedef long long ll;

main()
{
  // compute all C(n,m) saved in comb
  ll comb[1000][1000];  
  for (int i = 0; i <= n; ++i) 
  {
      comb[i][i] = comb[i][0] = 1;            
      if (i==0) continue;
      for (int j = 1; j < i; ++j) 
      {
          comb[i][j] = comb[i - 1][j - 1] + comb[i - 1][j];
      }
  }  
}

// Compute C(n,m) on demand
ll help(int n, int m)
{
    long long cnt = 1;
    for(int i = 0; i < m; i++)
    {
        cnt *= n - i;
        cnt /= i + 1;
    }
    return cnt;
}
::::::::::::::
Template/CPP_LANG/Hash.cpp
::::::::::::::
#include <functional>
// from boost (functional/hash):
// see http://www.boost.org/doc/libs/1_35_0/doc/html/hash/combine.html template
template <typename T>
inline void hash_combine(std::size_t &seed, const T &val) {
    seed ^= std::hash<T>()(val) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}
// auxiliary generic functions to create a hash value using a seed
template <typename T> inline void hash_val(std::size_t &seed, const T &val) {
    hash_combine(seed, val);
}
template <typename T, typename... Types>
inline void hash_val(std::size_t &seed, const T &val, const Types &... args) {
    hash_combine(seed, val);
    hash_val(seed, args...);
}

template <typename... Types>
inline std::size_t hash_val(const Types &... args) {
    std::size_t seed = 0;
    hash_val(seed, args...);
    return seed;
}

struct pair_hash {
    template <class T1, class T2>
    std::size_t operator()(const std::pair<T1, T2> &p) const {
        return hash_val(p.first, p.second);
    }
};

#include <bits/stdc++.h>
using namespace std;
using ll = long long;

int main() {
    unordered_map<pair<ll, ll>, ll, pair_hash> slopeCount;
    unordered_set<pair<ll, ll>, pair_hash> seen;
    return 0;
}
// Reference: [C++ Standard Library: A tutorial and reference, Second version](https://www.mica.edu.vn/perso/Vu-Hai/EE3490/Ref/The%20C++Standard%20Library%20-%202nd%20Edition.pdf) Chapter 7.9.2: Creating and Controlling unordered Container
::::::::::::::
Template/CPP_LANG/istringstream.cpp
::::::::::::::
// read a series of words in str seperated by blanks
vector<string> ReadWordsFromString(string str)
{
  vector<string>str_arr;
  istringstream in(str);
  int k = 0;
  for (string word; in>>word; k++) 
      str_arr.push_back(word);
  return str_arr;
}

::::::::::::::
Template/Diff_Array_2D/code.cpp
::::::::::::::
class Diff2d {    
public:
    vector<vector<int>>f;
    vector<vector<int>>diff;    
    int m,n;
    Diff2d(int m, int n)
    {
        this->m = m;
        this->n = n;
        diff.resize(m+1);
        f.resize(m+1);        
        for (int i=0; i<m+1; i++)
        {
            diff[i].resize(n+1);
            f[i].resize(n+1);
        }            
    }
    void set(int x0, int y0, int x1, int y1, int val)
    {
        diff[x0][y0]+=val;
        diff[x0][y1+1]-=val;
        diff[x1+1][y0]-=val;
        diff[x1+1][y1+1]+=val;
    }
    void compute()
    {
        f[0][0] = diff[0][0];
        for (int i=0; i<m; i++)
            for (int j=0; j<n; j++)
            {
                int a = i==0?0:f[i-1][j];
                int b = j==0?0:f[i][j-1];
                int c = (i==0||j==0)?0:f[i-1][j-1];                
                f[i][j] = a + b - c + diff[i][j];
            }
    }    
};
::::::::::::::
Template/Diff_Array_2D/Readme.md
::::::::::::::
我们来复习一下二维差分的模板。假设二维矩阵为f[i][j]。我们构造与之对应的差分数组diff[i][j]. 如果我们想将以(x0,y0)为左上角、(x1,y1)为右下角的矩形区域统一加上val，那么我们只需要在diff数组上做标记：
```
diff[x0][y0]+=1;
diff[x0][y1+1]-=1;
diff[x1+1][y0]-=1;
diff[x1+1][y1+1]+=1;
```
其中diff[i][j]的物理意义是，以(i,j)为左上角、延伸至大矩阵（即整个空间）的右下角，这样的区域我们整体赋值. 

这样的操作可以进行多次。如果我们想重构更新后的f的值，需要做如下操作：
```
for (int i=0; i<m; i++)
    for (int j=0; j<n; j++)
    {               
        f[i][j] = f[i-1][j] + f[i][j-1] - f[i-1][j-1] + diff[i][j];
    }
```
此时可以输出任意f里的任意数值。注意，由上面的公式可以看出，diff数组的维度要比f大一点。计算f时，如果遇到越界的格子，默认为0.

模板代码的三个方法：
1. Diff2d(vector<vector<int>>& A) 根据所给的矩阵维度初始化（A本身的值没有用处）
2. void set(int x0, int y0, int x1, int y1, int val) 将以(x0,y0)为左上角、(x1,y1)为右下角的矩形区域统一加上val
3. void compute() 输出重构的二维数组前必须做这步操作
4. f[i][j] 直接输出重构的二维数组的任意值
::::::::::::::
Template/Fast_IO/Fast_IO.cpp
::::::::::::::
#define fastIO ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
::::::::::::::
Template/Graph/Hungarian.cpp
::::::::::::::
int num_nodes = 100000;
class Solution {
    vector<int> next[num_nodes];
    int match[num_nodes];
public:
    int minimumOperations(vector<vector<int>>& grid) 
    {
        // construct next[]
        
        for (int i=0; i<num_nodes; i++)
            match[i] = -1;
        
        vector<bool>visited(num_nodes);
        
        int count = 0;
        for (int i=0; i<num_nodes; i++)
        {
            if (match[i]!=-1) continue;
            visited.assign(num_nodes, 0);
            if (dfs(i, visited))
                count++;            
        }
        
        return count;
    }
                                        
    bool dfs(int i, vector<bool>&visited)
    {
        for (int j: next[i])
        {
            if (visited[j]) continue;
            visited[j] = true;
            if (match[j]==-1 || dfs(match[j], visited))
            {
                match[i] = j;
                match[j] = i;
                return true;
            }
        }
        return false;
    }                                        
};
::::::::::::::
Template/Graph/Judge_Circle.cpp
::::::::::::::

int numNodes;
int visited[numNodes];
vector<vector<int>> next;

main()
{
  // prepare next; // next[i][j]: there is a directional path i->j

  // dfs 判断有环
  for (int i=0; i<numNodes; i++)
  {            
      if (dfs(i)==false) return false;            
  }
  return true;

  // bfs 判断有环
  return bfs();
}

bool dfs(int cur)
{
    if (visited[cur]==1) return true;

    visited[cur] = 2;
    for (int next: next[cur])
    {
        if (visited[next]==1) continue;
        if (visited[next]==2) return false;
        if (dfs(next)==false)  return false;
    }
    visited[cur] = 1;
    return true;
}



bool bfs() 
{        
    queue<int>q;
    int count = 0;

    vector<int>InDegree(numNodes,0);
    for (int i=0; i<numNodes; i++)
    	for (int j: next[i])
    		InDegree[j]++;

    for (int i=0; i<numNodes; i++)
    {
        if (InDegree[i]==0) 
        {
            q.push(i);
            count++;
        }
    }
                
    while (!q.empty())
    {
        int curCourse = q.front();
        q.pop();
        for (auto child: next[curCourse])
        {
            InDegree[child]--;
            if (InDegree[child]==0)
            {
                q.push(child);
                count++;
            }                    
        }
    }        
    
    return count==numNodes;        
}
::::::::::::::
Template/Graph/Readme.md
::::::::::::::

### 二分图
#### 匈牙利算法
“匈牙利算法”指出：通过一条增广路径，通过取反操作，我们就能匹配更多的点。
增广路径是指，由一个未匹配的顶点开始，经过若干个匹配顶点，最后到达对面集合的一个未匹配顶点的路径，即这条路径将两个不同集合的两个未匹配顶点通过一系列匹配顶点相连。

https://www.renfei.org/blog/bipartite-matching.html

#### KM算法
带权二分图的最优匹配问题，可由KM算法解决。 有权重 weight

https://www.cnblogs.com/logosG/p/logos.html   
https://blog.csdn.net/chenshibo17/article/details/79933191
::::::::::::::
Template/Inverse_Element/Inverse_Element.cpp
::::::::::::::
#include<bits/stdc++.h>
#define LL long long
using namespace std;
const LL N = 1e6+7, mod = 998244353;

/*********************************/
// Linear method to compute inv[i]
void main() 
{    
    LL inv[N];
    inv[1] = 1;
    for(int i=2; i<N; ++i)
        inv[i]=(mod-mod/i) * inv[mod%i] % mod;
    
    // ret *= inv[n] % mod;   // ret = (ret / n) % mod;    
}

/*********************************/
// Qucik Pow Method, based on Fermat's little theorem

LL quickPow(int x, int y) 
{
    LL ret = 1;
    LL cur = x;
    while (y) 
    {
        if (y & 1) 
        {
            ret = (LL)ret * cur % mod;
        }
        cur = (LL)cur * cur % mod;
        y >>= 1;
    }
    return ret;
}

LL inv(LL x) 
{
    return quickPow(x, mod - 2);
}

/*****************************/

LL inv(int x) 
{
    LL s = 1;
    for (; x > 1; x = mod%x)
      s = s*(mod-mod/x)%mod;
    return s;
}
::::::::::::::
Template/Inverse_Element/Readme.md
::::::::::::::
一般地，我们说如果a和b满足这样的性质：
```
x / a ≡ x * b (mod M)
```
从形式上来看，b好像就与1/a（在同余的意义上）等价，所以我们称b就是a的逆元，记做 b = inv(a)（反之也成立）。     
对于a而言，存在逆元的充要条件是a与M互质。当然，我们做题时M一般都已经是质数。

#### 逆元的计算方法

##### 方法1：快速幂法
根据费马小定理，我们有
```
inv(a) ≡ a ^ (M-2)  (mod M)
```
显然，我们需要利用快速幂来计算这个数。

##### 方法2：线性求逆元
如果我们想求1,2,3...N 每个数的逆元：
```cpp
const ll N = 1e6+7, M = 998244353;
ll inv[N];
int i;
for(inv[1]=1, i=2; i<N; ++i)
    inv[i] = (M - M/i) * inv[M % i] % M
```

#### 逆元的一些性质
逆元的计算有如下的性质：
```
x1/y1 + x2/y2 ≡ x1 * y1^-1 + x2 * y2^-1 (mod M)
x1/y1/y2 ≡ x1 * y1^-1 * y2^-1 (mod M)
```
::::::::::::::
Template/Math/Primes.cpp
::::::::::::::
// Find all primes <= n.
vector<int>Eratosthenes(int n)
{
    auto q=vector<int>(n+1,0);
    for (int i=2; i<=sqrt(n); i++)
    {
        if (q[i]==0)
        {
            int j=i*2;
            while (j<=n)
            {
                q[j]=1;
                j+=i;
            }
        }
    }
    vector<int>primes;
    for (int i=2; i<=n; i++)
    {
        if (q[i]==0)
            primes.push_back(i);                
    }
    return primes;
}
::::::::::::::
Template/Math/QuickPow.cpp
::::::::::::::
class Solution {
public:
    double quickMul(double x, long long N) {
        if (N == 0) {
            return 1.0;
        }
        double y = quickMul(x, N / 2);
        return N % 2 == 0 ? y * y : y * y * x;
    }

    double myPow(double x, int n) {
        long long N = n;
        return N >= 0 ? quickMul(x, N) : 1.0 / quickMul(x, -N);
    }
};
::::::::::::::
Template/Random/random.cpp
::::::::::::::
mt19937 gen{random_device{}()};
int left = 1, right = 100;
int r = uniform_int_distribution<int>{left, right}(gen);
::::::::::::::
Template/RB_Tree/ordered_set.cpp
::::::::::::::
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update
using namespace __gnu_pbds;

typedef tree<
int ,
null_type,
less<int>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;

// find_by_order(k) returns an iterator to the k-th largest element (counting from zero), 
// order_of_key(x) returns the number of items in a set that are strictly smaller than x; or equivlently, the index of the first item greater or equal to x
    
    
int main() {
    ordered_set Set;    
    vector<int>nums({1,3,2,2,4,4,8,6,7,3});
    for (int i=0; i<nums.size(); i++)
    {
        Set.insert(nums[i]);
        cout<<nums[i]<<":"<<Set.order_of_key(nums[i])<<endl;
    }    
}
// If you want to make it like a multiset, you may design the base type of the ordered_set as pair<int,int>
::::::::::::::
Template/SegmentTree/SegmentTree_Basic.cpp
::::::::::::::
// LeetCode 307. Range Sum Query - Mutable

class NumArray {
    class SegTreeNode
    {
        public:
        SegTreeNode* left;
        SegTreeNode* right;
        int start, end;
        int info;        
        SegTreeNode(int a, int b):start(a),end(b),info(0),left(NULL),right(NULL){}
    };
    
    void init(SegTreeNode* node, int a, int b)  // init for range [a,b]
    {                        
        if (a==b)
        {
            node->info = nums[a];
            return;
        }
        int mid = (a+b)/2;
        if (node->left==NULL)
        {
            node->left = new SegTreeNode(a, mid);
            node->right = new SegTreeNode(mid+1, b);
        }
        init(node->left, a, mid);
        init(node->right, mid+1, b);
                
        node->info = node->left->info + node->right->info;  // write your own logic
    }
    
    void updateSingle(SegTreeNode* node, int id, int val)
    {        
        if (id < node->start || id > node->end ) return;
        if (node->start == node->end)
        {
            node->info = val;
            return;
        }
        updateSingle(node->left, id, val);
        updateSingle(node->right, id, val);
        node->info = node->left->info + node->right->info;  // write your own logic
    }
    
    int queryRange(SegTreeNode* node, int a, int b)
    {
        if (b < node->start || a > node->end )
        {
            return 0;  // write your own logic
        }
        if (a <= node->start && b>=node->end)
        {
            return node->info;  // write your own logic
        }        
        return queryRange(node->left, a, b) + queryRange(node->right, a, b);  // write your own logic
    }    
    
    vector<int> nums;
    SegTreeNode* root;
    
public:
    NumArray(vector<int> nums) 
    {
        this->nums = nums;
        root = new SegTreeNode(0, nums.size()-1);
        init(root, 0, nums.size()-1);
    }
    
    void update(int i, int val) 
    {
        updateSingle(root, i, val);        
    }
    
    int sumRange(int i, int j) 
    {
        return queryRange(root, i, j);
    }
};

::::::::::::::
Template/SegmentTree/SegmentTree_LazyTag.cpp
::::::::::::::
// LeetCode 370. Range Addition

class Solution {
    class SegTreeNode
    {
        public:
        SegTreeNode* left;
        SegTreeNode* right;
        int start, end;
        int info;       
        int tag;
        SegTreeNode(int a, int b):start(a),end(b),info(0),tag(0),left(NULL),right(NULL){}
    };
    
    void init(SegTreeNode* node, int a, int b)  // init for range [a,b]
    {                        
        if (a==b)
        {
            node->info = 0;
            return;
        }
        int mid = (a+b)/2;
        if (node->left==NULL)
        {
            node->left = new SegTreeNode(a, mid);
            node->right = new SegTreeNode(mid+1, b);
        }
        init(node->left, a, mid);
        init(node->right, mid+1, b);
                
        node->info = node->left->info + node->right->info;  // write your own logic
    }
    
    void updateRangeBy(SegTreeNode* node, int a, int b, int val)
    {        
        if (b < node->start || a > node->end ) return;
        if (a <= node->start && node->end <=b)
        {
            // write your own logic            
            node->info += val * len(node);    
            node->tag += val;   
            return;
        }
        
        pushDown(node);        
        updateRangeBy(node->left, a, b, val);
        updateRangeBy(node->right, a, b, val);
        
        node->info = node->left->info + node->right->info;  // write your own logic
    }
    
    int len(SegTreeNode* node)
    {
        return node->end - node->start + 1;
    }
    
    void pushDown(SegTreeNode* node)
    {
        if (node->tag!=0)
        {
            node->left->info += len(node->left) * node->tag;
            node->right->info += len(node->right) * node->tag;
            node->left->tag += node->tag;
            node->right->tag += node->tag;
            node->tag = 0;
        }        
    }    
    
    int queryRange(SegTreeNode* node, int a, int b)
    {
        if (b < node->start || a > node->end )
        {
            return 0;  // write your own logic
        }
        if (a <= node->start && b>=node->end)
        {
            return node->info;  // write your own logic
        }        
        pushDown(node);
        return queryRange(node->left, a, b) + queryRange(node->right, a, b);  // write your own logic
    }    
    
    SegTreeNode* root;
    
public:
    vector<int> getModifiedArray(int length, vector<vector<int>>& updates) 
    {
        SegTreeNode* root = new SegTreeNode(0, length-1);
        
        init(root, 0, length-1);
            
        for (auto& update: updates)
        {
            updateRangeBy(root, update[0], update[1], update[2]);            
        }
        vector<int>rets(length);
        for (int i=0; i<length; i++)
            rets[i] = queryRange(root, i, i);
        return rets;
    }
};
::::::::::::::
Template/SegmentTree/SegmentTree_LazyTag_Discretization.cpp
::::::::::::::
// LeetCode 699. Falling Squares

class Solution {
    class SegTreeNode
    {
        public:
        SegTreeNode* left;
        SegTreeNode* right;
        int start, end;
        int info;  // the max height of the range
        bool tag; 
        SegTreeNode(int a, int b):start(a),end(b),info(0),tag(0),left(NULL),right(NULL){}
    };
    
    void init(SegTreeNode* node, int a, int b)  // init for range [a,b]
    {                        
        if (a==b)
        {
            node->info = 0;
            return;
        }
        int mid = (a+b)/2;
        if (node->left==NULL)
        {
            node->left = new SegTreeNode(a, mid);
            node->right = new SegTreeNode(mid+1, b);
        }
        init(node->left, a, mid);
        init(node->right, mid+1, b);
                
        node->info = 0;  // write your own logic
    }
    
    void updateRange(SegTreeNode* node, int a, int b, int val)
    {        
        if (b < node->start || a > node->end ) // no intersection
            return;
        if (a <= node->start && node->end <=b)
        {
            node->info = val;
            node->tag = 1;
            return;
        }
        
        pushDown(node);        
        updateRange(node->left, a, b, val);
        updateRange(node->right, a, b, val);
        
        node->info = max(node->left->info, node->right->info);  // write your own logic
    }
    
    int queryRange(SegTreeNode* node, int a, int b)
    {
        if (b < node->start || a > node->end )
        {
            return 0;  // write your own logic
        }
        if (a <= node->start && b>=node->end)
        {
            return node->info;  // write your own logic
        }            
        pushDown(node);        
        return max(queryRange(node->left, a, b), queryRange(node->right, a, b));  // write your own logic        
    }    
    
    void pushDown(SegTreeNode* node)
    {
        if (node->tag==true)
        {
            node->left->info = node->info;
            node->right->info = node->info;
            node->left->tag = 1;
            node->right->tag = 1;
            node->tag = 0;
        }        
    }  
    
    
public:
    vector<int> fallingSquares(vector<vector<int>>& positions) 
    {
        set<int>Set;
        for (auto & rect: positions)
        {
            Set.insert(rect[0]);
            Set.insert(rect[0]+rect[1]);
        }
        unordered_map<int,int>pos2idx;
        int idx = 0;
        for (auto x: Set)
        {
            pos2idx[x] = idx;
            idx++;
        }
        int n = pos2idx.size();
        
        SegTreeNode* root = new SegTreeNode(0, n-1);
        init(root, 0, n-1);
        
        int maxH = 0;
        vector<int>rets;
        for (auto & rect: positions)
        {
            int a = pos2idx[rect[0]];
            int b = pos2idx[rect[0]+rect[1]];
            int h = queryRange(root, a, b-1);  // [a,b)
            updateRange(root, a, b-1, h + rect[1]);
            maxH = max(maxH, h + rect[1]);
            rets.push_back(maxH);
        }
        return rets;        
    }
};
::::::::::::::
Template/Sub_Rect_Sum_2D/code.cpp
::::::::::::::
class RegionSum {
    vector<vector<int>>presum;
public:
    RegionSum(vector<vector<int>>& A)
    {
        int m = A.size();
        int n = A[0].size();
        presum.resize(m);
        for (int i=0; i<m; i++)
            presum[i].resize(n);
        for (int i=0; i<m; i++)
            for (int j=0; j<n; j++)
            {
                int a = i==0?0:presum[i-1][j];
                int b = j==0?0:presum[i][j-1];
                int c = (i==0||j==0)?0:presum[i-1][j-1];
                presum[i][j] = a + b - c + A[i][j];
            }
    }
    int query(int i, int j, int x, int y)
    {
        int a = j==0?0:presum[x][j-1];
        int b = i==0?0:presum[i-1][y];
        int c = (i==0||j==0)?0:presum[i-1][j-1];
        int area = presum[x][y] - a - b + c;
        return area;
    }
};
