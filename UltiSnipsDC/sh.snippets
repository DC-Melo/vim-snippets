priority -50

global !p
import vim

# Tests for the existence of a variable declared by Vim's filetype detection
# suggesting the type of shell script of the current file
def testShell(scope, shell):
	return vim.eval("exists('" + scope + ":is_" + shell + "')")

# Loops over the possible variables, checking for global variables
# first since they indicate an override by the user.
def getShell():
	for scope in ["g", "b"]:
		for shell in ["bash", "posix", "sh", "kornshell"]:
			if testShell(scope, shell) == "1":
				if shell == "kornshell":
					return "ksh"
				if shell == "posix":
					return "sh"
				return shell
	return "sh"
endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################

snippet forLoopList "for loop list of  string" b
# https://linuxhint.com/bash_loop_list_strings/
# Example-1: Iterating a string of multiple words within for loop
#!/bin/bash
# Read a string with spaces using for loop
for value in I like programming
do
    echo $value
done

# Example-2: Iterating a string variable using for loop
#!/bin/bash
# Define a string variable with a value
StringVal="Welcome to linuxhint"
# Iterate the string variable using for loop
for val in $StringVal; do
    echo $val
done

# Example-3: Iterate an array of string values
#!/bin/bash
# Declare an array of string with type
declare -a StringArray=("Linux Mint" "Fedora" "Red Hat Linux" "Ubuntu" "Debian" )
# Iterate the string array using for loop
for val in ${StringArray[@]}; do
   echo $val
done

# Example-4: Print multiple words string value as a single value
#!/bin/bash
# Declare a string array with type
declare -a StringArray=("Windows XP" "Windows 10" "Windows ME" "Windows 8.1"
"Windows Server 2016" )
# Read the array values with space
for val in "${StringArray[@]}"; do
  echo $val
done


# Example-5: Iterating string values of an array using ‘*’
#!/bin/bash
#Declare a string array
LanguageArray=("PHP"  "Java"  "C#"  "C++"  "VB.Net"  "Python"  "Perl")
# Print array values in  lines
echo "Print every element in new line"
for val1 in ${LanguageArray[*]}; do
     echo $val1
done
echo ""
# Print array values in one line
echo "Print all elements in a single line"
for val2 in "${LanguageArray[*]}"; do
    echo $val2
done
echo ""

# Example-6: Iterating comma separated string values
#!/bin/bash
DataList=" HTML5, CCS3, BootStrap, JQuery "
Field_Separator=$IFS
# set comma as internal field separator for the string list
IFS=,
for val in $DataList;
do
echo $val
done
IFS=$Field_Separator

# Example-7: Reading multiple string arrays together
#! /bin/sh
str_array1=("Magento 2.2.4" "WooCommerce")
str_array2=("CodeIgnitor" "Laravel")
combine=(str_array1 str_array2)
for arrItem in ${combine[@]}
do
   eval 'for val in "${'$arrItem'[@]}";do echo "$val";done'
done

# Example-8: Using pattern to read the list of strings
#! /bin/sh
# Define a list of string variable
stringList=WordPress,Joomla,Magento
# Use comma as separator and apply as pattern
for val in ${stringList//,/ }
do
   echo $val
done
$0
endsnippet

snippet trashExcept "rsync file formwork" b
rm -v !("filename")
rm -v !("filename1"|"filename2")
rm -i !(*.zip)
rm -v !(*.zip|*.odt)
find . -type f -not -name '*.gz'-delete
find . -type f -not \(-name '*gz' -or -name '*odt' -or -name '*.jpg' \) -delete
$0
endsnippet

snippet lsFiles "ls files " b
# 10条历史记录                                 
clear; ls -ailh  --color=auto|nl;dirs -p -v; tmux list-session; jobs -l;cowsay.sh
# 仅仅显示文件夹                               
ls -dtalh */
# 仅仅显示文件夹                               
`ls -dtah */ | head -1`
# 仅仅显示文件夹                               
`ls -dtah */ | tail -1`
# 仅仅显示文件                                 
ls -ptalh . | grep -v /
# 仅仅显示文件                                 
`ls -ptah . | grep -v / | head -1`
# 仅仅显示文件                                  
`ls -ptah . | grep -v / |tail -1`
# 仅仅显示最新几个文件                         
ls -talh  . | head -20 |tail -20
# 十条历史记录                                  
history 10                                                                                 
# 十条历史记录  
echo '# '`date +%s` >> ~/.bash_history_save
echo 'code' >> ~/.bash_history_save
$0
endsnippet

snippet rsyncFormwork "rsync file formwork" b
rsync -avzP --delete dc@test0:/home/dc/5W/LeetCode_1000/ ~/5W/LeetCode_1000
$0
endsnippet

snippet printEnviroment "displays the environment variables" b
printenv HOME
$0
endsnippet

snippet httpProxy "displays the environment variables" b
export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890
unset   https_proxy    http_proxy    all_proxy
echo    $https_proxy   $http_proxy   $all_proxy
$0
endsnippet

snippet sshscp "ssh scp " b
ssh -X dc@server.natappfree.cc -o ServerAliveInterval=30 -p 35584
ssh-copy-id -i ./.ssh/id_rsa.pub dc@server.natappfree.cc -p 33386
scp -P 35584 dc@server.natappfree.cc:/home/dc/test.py .
rsync -avzP --delete dc@test0:/home/dc/5W/LeetCode_1000/ ~/5W/LeetCode_1000
$0
endsnippet

snippet tarTapeArchive "tape archive" b
# 查看归档内容
tar -tvf  test.tar
# 添加新内容
tar --append --file=test.tar file
# 从压缩包中删除
tar -f file.tar --delete file1 file2 dir1/*
# 从压缩包中解压部分文件
tar --extract --file=test.tar dir 
$0
endsnippet

snippet zipCompressArchive  "compress (archive) files" b
# 查看压缩内容
unzip -l file.zip
zipinfo -1 filename.zip
lesspipe file.zip
zcat <archived-file>
# 添加文件或文件夹
zip -ur existing.zip myFolder
# 删除压缩包中的文件
zip -d your-archive.zip file1 file2
$0
endsnippet

snippet zip7CompressArchive  "implements LZMA compression algorithm featuring" b
# 查看压缩内容
7z l existing.zip
# 追加压缩内容
7z a -up1q1r2x1y1z1w1 zipfile filesToAdd
# 解压特定内容
7z e archive.zip -oc:\soft *.xls
# 删除压缩包中的文件
7z d existing.zip file-to-exclude
$0
endsnippet

snippet rarCompressArchive  "implements LZMA compression algorithm featuring" b
rar a -r yourfiles.rar *.txt
unrar x c:\yourfile.rar *.gif c:\extractfolder\
unrar e file.rar
$0
endsnippet


snippet goBuild "go build" b
CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build demo.go
$0
endsnippet


snippet sourceAll "source all file" b
source /etc/environment; source /etc/profile; source ~/.bashrc
$0
endsnippet

snippet googleOpenLink "google open link" b
google-chrome $(cat link_list.md)
$0
endsnippet

snippet addTitle2Video "add title to video" b
srt format
00:00:29,876 --> 00:00:31,709
她 她说什么

2
00:00:31,709 --> 00:00:32,959
你再放一次

3
00:00:33,292 --> 00:00:35,751
第一个字应该是丩啦

ffmpeg -i input.mp4 -strict -2 -vf subtitles=sub.srt output.mp4
$0
endsnippet

snippet convGif4Mp4 "convert mp4 to gif" b
ffmpeg -ss 00:00:00 -t 20 -i input.mp4 -s 300x400 -r 15 output_video.gif
convert output_video.gif -fuzz 20% -layers Optimize output_video2.gif
convert $(for ((a=0; a<700; a++)); do printf -- "-delay 10 name%s.png " $a; done;) result.gif
$0
endsnippet

snippet listFonds "lists  fonts  and  styles available on the system for applications using fontconfig" b
# 查看字体
fc-list
$0
endsnippet

snippet imgifaddText "image add gif" b
unset stroke
url="https://gimg2.baidu.com/image_search/src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fq_70%2Cc_zoom%2Cw_640%2Fimages%2F20190730%2F6b675c4a22a9465a8122ad57d43043eb.gif&refer=http%3A%2F%2F5b0988e595225.cdn.sohucs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1652366044&t=65a0e8b47b5ef094ecf4ac333fe0fed1"
twords="美女，谢谢你的红包"
url="https://gimg2.baidu.com/image_search/src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fq_70%2Cc_zoom%2Cw_640%2Fimages%2F20180622%2Fc657bc1805a34ef98cf8b80557ab7b6f.gif&refer=http%3A%2F%2F5b0988e595225.cdn.sohucs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1652366140&t=3ee0f2af6a94c0a97cf5f5602ad078ed"
twords="磕头，谢谢你的红包"
url="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.soogif.com%2FhgtW4EvFuOqxqNR7Zghfsj3JJucRkyZJ.gif&refer=http%3A%2F%2Fimg.soogif.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1652366319&t=6d737bdc83acd966e4623e42696319ba"
twords="熊猫欢迎新朋友"
url="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwx3.sinaimg.cn%2Flarge%2Fceeb653ely1g5g2ia9qxxg20dc0dcn3s.gif&refer=http%3A%2F%2Fwx3.sinaimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1652366387&t=804b18c2becfbdbfc7fffd34230d2cb7"
twords="熊猫鲜花欢迎新朋友"
url="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwx3.sinaimg.cn%2Flarge%2Fceeb653ely1g5g2ia9qxxg20dc0dcn3s.gif&refer=http%3A%2F%2Fwx3.sinaimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1652366387&t=804b18c2becfbdbfc7fffd34230d2cb7"
bwords=""
bwords=""
lwords=""
rwords=""
percent=${percent:-75}
color=${color:-red}
# stroke=${stroke:-yellow}
if [  -n "$(uname -a | grep -i darwin)" ]; then
    font=~/Library/Fonts/印品抹茶体.ttf
    rm outfile*.png
else
    font=~/.local/share/fonts/印品抹茶体.ttf
    trash outfile*.png
fi
if echo "${url}" | grep -q "http"
then
    wget --user-agent="Mozilla/5.0" "${url}" -O infile.gif 
    input="infile.gif"
fi

strSize="\`file infile.gif\`"
echo $strSize
pat='([0-9]+) x ([0-9]+)'
[[ $strSize =~ $pat ]] # $pat must be unquoted
echo "${BASH_REMATCH[0]}"
echo "${BASH_REMATCH[1]}"
echo "${BASH_REMATCH[2]}"
dcSize=$((${BASH_REMATCH[1]}/10))
dcAnno=$((${BASH_REMATCH[1]}/100))
tlen=$(echo ${twords} | wc -c)
blen=$(echo ${bwords} | wc -c)
llen=$(echo ${lwords} | wc -c)
rlen=$(echo ${rwords} | wc -c)
echo "A:${twords}   V:${bwords}   <:${lwords}   >:${rwords}"
tpointSize=$((${BASH_REMATCH[1]}*${percent}/30/${tlen}))
bpointSize=$((${BASH_REMATCH[1]}*${percent}/30/${blen}))
lpointSize=$((${BASH_REMATCH[2]}*${percent}/30/${llen}))
rpointSize=$((${BASH_REMATCH[2]}*${percent}/30/${rlen}))
echo $dcSize
echo $dcAnno
echo $tpointSize

# convert -pointsize 19 -fill black -font ${font} -weight bolder -gravity southeast  -annotate +5+5 "DC"  ${input} ${output}
convert -background none -pointsize ${dcSize} -fill grey -font ${font} -weight bolder -gravity southeast  -annotate +$dcAnno+$dcAnno "DC"  ${input} outfile.gif

if [[ -z ${stroke} ]]; then
    [ -n "$twords" ] && mogrify -pointsize ${tpointSize} -fill "${color}"  -font "${font}" -weight bolder -gravity north      -annotate +5+5 "${twords}"  outfile.gif
    [ -n "$bwords" ] && mogrify -pointsize ${bpointSize} -fill "${color}"  -font "${font}" -weight bolder -gravity south      -annotate +5+5 "${bwords}"  outfile.gif
    [ -n "$lwords" ] && mogrify -pointsize ${lpointSize} -fill "${color}"  -font "${font}" -weight bolder -gravity northwest  -annotate +5+5 "${lwords}"  outfile.gif
    [ -n "$rwords" ] && mogrify -pointsize ${rpointSize} -fill "${color}"  -font "${font}" -weight bolder -gravity northeast  -annotate +5+5 "${rwords}"  outfile.gif
else
    [ -n "$twords" ] && mogrify -pointsize ${tpointSize} -fill "${color}" -stroke "${stroke}" -strokewidth 1 -font "${font}" -weight bolder -gravity north      -annotate +5+5 "${twords}"  outfile.gif
    [ -n "$bwords" ] && mogrify -pointsize ${bpointSize} -fill "${color}" -stroke "${stroke}" -strokewidth 1 -font "${font}" -weight bolder -gravity south      -annotate +5+5 "${bwords}"  outfile.gif
    [ -n "$lwords" ] && mogrify -pointsize ${lpointSize} -fill "${color}" -stroke "${stroke}" -strokewidth 1 -font "${font}" -weight bolder -gravity northwest  -annotate +5+5 "${lwords}"  outfile.gif
    [ -n "$rwords" ] && mogrify -pointsize ${rpointSize} -fill "${color}" -stroke "${stroke}" -strokewidth 1 -font "${font}" -weight bolder -gravity northeast  -annotate +5+5 "${rwords}"  outfile.gif
fi
$0
endsnippet

snippet imGif4Text "Generates gif from " b
text1="高梧百尺夜苍苍，"
text2="乱扫秋星落晓霜。"
text3="工作了工作作了，"
text4="测试本文文文文。"
text5="--作者"
if [  -n "$(uname -a | grep -i darwin)" ]; then
    font=~/Library/Fonts/印品抹茶体.ttf
    rm outfile*.png
else
    font=~/.local/share/fonts/印品抹茶体.ttf
    trash outfile*.png
fi
convert \
    -font "${font}" \
    -fill white -stroke white -strokewidth 1 -gravity center -pointsize 20 label:"${text1}" \
    -fill white -stroke white -strokewidth 1 -gravity center -pointsize 20 label:"${text2}" \
    -fill white -stroke white -strokewidth 1 -gravity center -pointsize 20 label:"${text3}" \
    -fill white -stroke white -strokewidth 1 -gravity center -pointsize 20 label:"${text4}" \
    -fill white -stroke white -strokewidth 1 -gravity East   -pointsize 20 label:"${text5}" \
    -append \
    outfile0.png
convert \
    -font "${font}" \
    -fill black -stroke black -strokewidth 1 -gravity center -pointsize 20 label:"${text1}" \
    -fill white -stroke white -strokewidth 1 -gravity center -pointsize 20 label:"${text2}" \
    -fill white -stroke white -strokewidth 1 -gravity center -pointsize 20 label:"${text3}" \
    -fill white -stroke white -strokewidth 1 -gravity center -pointsize 20 label:"${text4}" \
    -fill white -stroke white -strokewidth 1 -gravity East   -pointsize 20 label:"${text5}" \
    -append \
    outfile1.png
convert \
    -font "${font}" \
    -fill black -stroke black -strokewidth 1 -gravity center -pointsize 20 label:"${text1}" \
    -fill black -stroke black -strokewidth 1 -gravity center -pointsize 20 label:"${text2}" \
    -fill white -stroke white -strokewidth 1 -gravity center -pointsize 20 label:"${text3}" \
    -fill white -stroke white -strokewidth 1 -gravity center -pointsize 20 label:"${text4}" \
    -fill white -stroke white -strokewidth 1 -gravity East   -pointsize 20 label:"${text5}" \
    -append \
    outfile2.png
convert \
    -font "${font}" \
    -fill black -stroke black -strokewidth 1 -gravity center -pointsize 20 label:"${text1}" \
    -fill black -stroke black -strokewidth 1 -gravity center -pointsize 20 label:"${text2}" \
    -fill black -stroke black -strokewidth 1 -gravity center -pointsize 20 label:"${text3}" \
    -fill white -stroke white -strokewidth 1 -gravity center -pointsize 20 label:"${text4}" \
    -fill white -stroke white -strokewidth 1 -gravity East   -pointsize 20 label:"${text5}" \
    -append \
    outfile3.png
convert \
    -font "${font}" \
    -fill black -stroke black -strokewidth 1 -gravity center -pointsize 20 label:"${text1}" \
    -fill black -stroke black -strokewidth 1 -gravity center -pointsize 20 label:"${text2}" \
    -fill black -stroke black -strokewidth 1 -gravity center -pointsize 20 label:"${text3}" \
    -fill black -stroke black -strokewidth 1 -gravity center -pointsize 20 label:"${text4}" \
    -fill white -stroke white -strokewidth 1 -gravity East   -pointsize 20 label:"${text5}" \
    -append \
    outfile4.png
convert \
    -font "${font}" \
    -fill black -stroke black -strokewidth 1 -gravity center -pointsize 20 label:"${text1}" \
    -fill black -stroke black -strokewidth 1 -gravity center -pointsize 20 label:"${text2}" \
    -fill black -stroke black -strokewidth 1 -gravity center -pointsize 20 label:"${text3}" \
    -fill black -stroke black -strokewidth 1 -gravity center -pointsize 20 label:"${text4}" \
    -fill black -stroke black -strokewidth 1 -gravity East   -pointsize 20 label:"${text5}" \
    -append \
    outfile5.png
convert -delay 200 outfile*.png -loop 0  outfile.gif

strSize="\`file outfile.gif\`"
echo $strSize
pat='([0-9]+) x ([0-9]+)'
[[ $strSize =~ $pat ]] # $pat must be unquoted
echo "${BASH_REMATCH[0]}"
echo "${BASH_REMATCH[1]}"
echo "${BASH_REMATCH[2]}"
if  [[ ${BASH_REMATCH[2]} -gt ${BASH_REMATCH[1]} ]];then
    mogrify -coalesce -fuzz 1% -resize x500 -layers Optimize outfile.gif
else
    mogrify -coalesce -fuzz 1% -resize 500x -layers Optimize outfile.gif
fi
$0
endsnippet
snippet imGif4TextDelete "Generates gif from " b
text1="佳哥"
text2="成了我的培训专场了"
text3="大家集思广益"
text4="共同提高"
text5="共同提高"
size1=120
size2=100
size3=120
size4=200
size5=200
if [  -n "$(uname -a | grep -i darwin)" ]; then
    font=~/Library/Fonts/印品抹茶体.ttf
    rm outfile*.png
else
    font=~/.local/share/fonts/印品抹茶体.ttf
    trash outfile*.png
fi
#0 convert \
    #0 -font "${font}" \
    #1 -fill white -stroke white -strokewidth 2 -gravity center -pointsize ${size1} label:"${text1}" \
    #2 -fill white -stroke white -strokewidth 2 -gravity center -pointsize ${size2} label:"${text2}" \
    #3 -fill white -stroke white -strokewidth 2 -gravity center -pointsize ${size3} label:"${text3}" \
    #4 -fill white -stroke white -strokewidth 2 -gravity center -pointsize ${size4} label:"${text4}" \
    #5 -fill white -stroke white -strokewidth 2 -gravity center -pointsize ${size5} label:"${text5}" \
    #0 -append \
    #0 outfile05.png
#1 convert \
    #1 -font "${font}" \
    #1#a#A \(  \
    #1 -fill black -stroke black -strokewidth 2 -gravity center -pointsize ${size1} label:"${text1}" \
    #1#a#A -fill red   -stroke red   -strokewidth 10 -draw "line 20,100 1000,20" \)                 \
    #2#b#B \(  \
    #2 -fill white -stroke white -strokewidth 2 -gravity center -pointsize ${size2} label:"${text2}" \
    #2#b#B -fill white   -stroke white   -strokewidth 10 -draw "line 20,100 1000,20" \)                 \
    #3#c#C \(  \
    #3 -fill white -stroke white -strokewidth 2 -gravity center -pointsize ${size3} label:"${text3}" \
    #3#c#C -fill white   -stroke white   -strokewidth 10 -draw "line 20,100 1000,20" \)                 \
    #4#d#D \(  \
    #4 -fill white -stroke white -strokewidth 2 -gravity center -pointsize ${size4} label:"${text4}" \
    #4#d#D -fill white   -stroke white   -strokewidth 10 -draw "line 20,100 1000,20" \)                 \
    #5#e#E \(  \
    #5 -fill white -stroke white -strokewidth 2 -gravity center -pointsize ${size5} label:"${text5}" \
    #5#e#E -fill white   -stroke white   -strokewidth 10 -draw "line 20,100 1000,20" \)                 \
    #1 -append \
    #1 outfile15.png
#2 convert \
    #2 -font "${font}" \
    #2#a#A \(  \
    #2 -fill black -stroke black -strokewidth 2 -gravity center -pointsize ${size1} label:"${text1}" \
    #2#a#A -fill red   -stroke red   -strokewidth 10 -draw "line 20,100 1000,20" \)                 \
    #2#b#B \(  \
    #2 -fill black -stroke black -strokewidth 2 -gravity center -pointsize ${size2} label:"${text2}" \
    #2#b#B -fill red   -stroke red   -strokewidth 10 -draw "line 20,100 1000,20" \)                 \
    #3#c#C \(  \
    #3 -fill white -stroke white -strokewidth 2 -gravity center -pointsize ${size3} label:"${text3}" \
    #3#c#C -fill white   -stroke white   -strokewidth 10 -draw "line 20,100 1000,20" \)                 \
    #4#d#D \(  \
    #4 -fill white -stroke white -strokewidth 2 -gravity center -pointsize ${size4} label:"${text4}" \
    #4#d#D -fill white   -stroke white   -strokewidth 10 -draw "line 20,100 1000,20" \)                 \
    #5#e#E \(  \
    #5 -fill white -stroke white -strokewidth 2 -gravity center -pointsize ${size5} label:"${text5}" \
    #5#e#E -fill white   -stroke white   -strokewidth 10 -draw "line 20,100 1000,20" \)                 \
    #2 -append \
    #2 outfile25.png
#3 convert \
    #3 -font "${font}" \
    #3#a#A \(  \
    #3 -fill black -stroke black -strokewidth 2 -gravity center -pointsize ${size1} label:"${text1}" \
    #3#a#A -fill red   -stroke red   -strokewidth 10 -draw "line 20,100 1000,20" \)                 \
    #3#b#B \(  \
    #3 -fill black -stroke black -strokewidth 2 -gravity center -pointsize ${size2} label:"${text2}" \
    #3#b#B -fill red   -stroke red   -strokewidth 10 -draw "line 20,100 1000,20" \)                 \
    #3#c#C \(  \
    #3 -fill black -stroke black -strokewidth 2 -gravity center -pointsize ${size3} label:"${text3}" \
    #3#c#C -fill red   -stroke red   -strokewidth 10 -draw "line 20,100 1000,20" \)                 \
    #4#d#D \(  \
    #4 -fill white -stroke white -strokewidth 2 -gravity center -pointsize ${size4} label:"${text4}" \
    #4#d#D -fill white   -stroke white   -strokewidth 10 -draw "line 20,100 1000,20" \)                 \
    #5#e#E \(  \
    #5 -fill white -stroke white -strokewidth 2 -gravity center -pointsize ${size5} label:"${text5}" \
    #5#e#E -fill white   -stroke white   -strokewidth 10 -draw "line 20,100 1000,20" \)                 \
    #3 -append \
    #3 outfile35.png
#4 convert \
    #4 -font "${font}" \
    #4#a#A \(  \
    #4 -fill black -stroke black -strokewidth 2 -gravity center -pointsize ${size1} label:"${text1}" \
    #4#a#A -fill red   -stroke red   -strokewidth 10 -draw "line 20,100 1000,20" \)                 \
    #4#b#B \(  \
    #4 -fill black -stroke black -strokewidth 2 -gravity center -pointsize ${size2} label:"${text2}" \
    #4#b#B -fill red   -stroke red   -strokewidth 10 -draw "line 20,100 1000,20" \)                 \
    #4#c#C \(  \
    #4 -fill black -stroke black -strokewidth 2 -gravity center -pointsize ${size3} label:"${text3}" \
    #4#c#C -fill red   -stroke red   -strokewidth 10 -draw "line 20,100 1000,20" \)                 \
    #4#d#D \(  \
    #4 -fill black -stroke black -strokewidth 2 -gravity center -pointsize ${size4} label:"${text4}" \
    #4#d#D -fill red   -stroke red   -strokewidth 10 -draw "line 20,100 1000,20" \)                 \
    #5#e#E \(  \
    #5 -fill white -stroke white -strokewidth 2 -gravity center -pointsize ${size5} label:"${text5}" \
    #5#e#E -fill white   -stroke white   -strokewidth 10 -draw "line 20,100 1000,20" \)                 \
    #4 -append \
    #4 outfile45.png
#5 convert \
    #5 -font "${font}" \
    #5#a#A \(  \
    #5 -fill black -stroke black -strokewidth 2 -gravity center -pointsize ${size1} label:"${text1}" \
    #5#a#A -fill red   -stroke red   -strokewidth 10 -draw "line 20,100 1000,20" \)                 \
    #5#b#B \(  \
    #5 -fill black -stroke black -strokewidth 2 -gravity center -pointsize ${size2} label:"${text2}" \
    #5#b#B -fill red   -stroke red   -strokewidth 10 -draw "line 20,100 1000,20" \)                 \
    #5#c#C \(  \
    #5 -fill black -stroke black -strokewidth 2 -gravity center -pointsize ${size3} label:"${text3}" \
    #5#c#C -fill red   -stroke red   -strokewidth 10 -draw "line 20,100 1000,20" \)                 \
    #5#d#D \(  \
    #5 -fill black -stroke black -strokewidth 2 -gravity center -pointsize ${size4} label:"${text4}" \
    #5#d#D -fill red   -stroke red   -strokewidth 10 -draw "line 20,100 1000,20" \)                 \
    #5#e#E \(  \
    #5 -fill black -stroke black -strokewidth 2 -gravity center -pointsize ${size5} label:"${text5}" \
    #5#e#E -fill red   -stroke red   -strokewidth 10 -draw "line 20,100 1000,20" \)                 \
    #5 -append \
    #5 outfile55.png
#!@ convert \
    #!@ -font "${font}" \
    #1#!@#A -fill white -stroke white -strokewidth 2 -gravity center -pointsize ${size1} label:"${text1}" \
    #1#!@#a -fill black -stroke black -strokewidth 2 -gravity center -pointsize ${size1} label:"${text1}" \
    #2#!@#A -fill white -stroke white -strokewidth 2 -gravity center -pointsize ${size2} label:"${text2}" \
    #2#!@#b -fill black -stroke black -strokewidth 2 -gravity center -pointsize ${size2} label:"${text2}" \
    #3#!@#B -fill white -stroke white -strokewidth 2 -gravity center -pointsize ${size3} label:"${text3}" \
    #3#!@#c -fill black -stroke black -strokewidth 2 -gravity center -pointsize ${size3} label:"${text3}" \
    #4#!@#C -fill white -stroke white -strokewidth 2 -gravity center -pointsize ${size4} label:"${text4}" \
    #4#!@#d -fill black -stroke black -strokewidth 2 -gravity center -pointsize ${size4} label:"${text4}" \
    #5#!@#D -fill white -stroke white -strokewidth 2 -gravity center -pointsize ${size5} label:"${text5}" \
    #5#!@#e -fill black -stroke black -strokewidth 2 -gravity center -pointsize ${size5} label:"${text5}" \
    #!@ -append \
    #a#A outfile11.png
    #b#B outfile21.png
    #c#C outfile31.png
    #d#D outfile41.png
    #e#E outfile51.png
# mogrify -fuzz 20% -transparent white outfile5.png
mogrify -alpha set -channel RGBA -fuzz 20% -fill "rgb(255,255,255)" -draw "color 1,1 replace" -transparent white *.png
convert -delay 200 outfile*.png -loop 0 outfile.gif

strSize="\`file outfile.gif\`"
echo $strSize
pat='([0-9]+) x ([0-9]+)'
[[ $strSize =~ $pat ]] # $pat must be unquoted
echo "${BASH_REMATCH[0]}"
echo "${BASH_REMATCH[1]}"
echo "${BASH_REMATCH[2]}"
if  [[ ${BASH_REMATCH[2]} -gt ${BASH_REMATCH[1]} ]];then
    mogrify -coalesce -fuzz 1% -resize x500 -layers Optimize outfile.gif
    # convert -delay 200 outfile*.png -loop 0 -resize x500  outfile.gif
else
    mogrify -coalesce -fuzz 1% -resize 500x -layers Optimize outfile.gif
    # convert -delay 200 outfile*.png -loop 0 -resize 500x  outfile.gif
fi

$0
endsnippet

snippet imGif4Image2 "Generates gif from " b
# 两幅画渐变
im_image_effects_transitions.sh -m dissolve -f 21 -d 10 -p 10 -e infile1.png infile2.png outfile.gif
# 两副画旋转转换
im_image_effects_fxtransitions.sh -e swirl -f 18 -d 20 -p 50 -r infile1.png infile2.png outfile.gif
$0
endsnippet

snippet imGif4Image "Generates gif from " b
text1="佳哥"
text2="成了我的培训专场了"
size1=120
size2=100
if [  -n "$(uname -a | grep -i darwin)" ]; then
    font=~/Library/Fonts/印品抹茶体.ttf
    rm outfile*.png
else
    font=~/.local/share/fonts/印品抹茶体.ttf
    trash outfile*.png
fi
convert \
	# -flip \
	# -background  transparent \
	# -bordercolor white \
	-fill black \
	-gravity center \
	-font "${font}" \
	-pointsize 200 label:"${text1}" \
	-pointsize 100 label:"${text2}" \
	-append \
	# -border 10x10 \
	# -resize 830x \
		outfile1.png

# 正弦波动文字
#a#A im_image_effects_sinescrolltext.sh -t "${text1}" -w 800 -f "${font}" -b white -a 0.5 -r 0.5 -m constant outfile.gif
# 滚动文字
#b#B im_image_effects_scalescroll.sh -D left outfile1.png outfile.gif
# 对称水动
#c#C im_image_effects_shimmer.sh -r 3 outfile1.png outfile.gif
# 打字机
#d#D im_image_effects_typewriter.sh -f "${font}" -p 24 -t black -b white textfile outfile.gif
# USAGE: typewriter [-f font] [-p pointsize] [-t txtcolor] [-b bgcolor] textfile outfile USAGE: typewriter [-h or -help]
# 水波纹
#e#E im_image_effects_wiggle.sh -w 0.5 outfile1.png outfile.gif
# 旋转文字
#f#F im_image_effects_zoomrotatetext.sh -t "${text1}" -w 800 -f "${font}" -b pink -D cw -m 3 -F 30 -d 10 -p 10 outfile.gif
# 通道选择
#g#G im_miscellaneous_utilities_flickerchannel.sh -f -i infile

strSize="\`file outfile.gif\`"
echo $strSize
pat='([0-9]+) x ([0-9]+)'
[[ $strSize =~ $pat ]] # $pat must be unquoted
echo "${BASH_REMATCH[0]}"
echo "${BASH_REMATCH[1]}"
echo "${BASH_REMATCH[2]}"
if  [[ ${BASH_REMATCH[2]} -gt ${BASH_REMATCH[1]} ]];then
    mogrify -coalesce -fuzz 1% -resize x500 -layers Optimize outfile.gif
else
    mogrify -coalesce -fuzz 1% -resize 500x -layers Optimize outfile.gif
fi

$0
endsnippet

snippet im3Dbox "Generates a perspective view of a 3D box at any orientation with pictures pasted on each of its sides" b
# USAGE: 3Dbox option=value infile1 infile2 infile3 [infile4 infile5 infile6] outfile
# Pan Animation Arguments:
tilt=-45 pef=0 filter=point format=center
$0
endsnippet

snippet imCylinderWarp " Applies a cylinder distortion to an image using an external displacement map" b
# USAGE: cylinderwarp angle displacementfile infile [backgroundfile] outfile
-E -m vertical -r 73 -l 120 -w 100 -p 5 -n 94 -e 2 -a 0 -v background -b none -f none -o +24+10
# Animation Code:
(
for ((i=0; i<360; i=i+20)); do
echo >&2 "$i"
cylinderwarp $i displace.png wallpaper.png coffee_mug1.jpg miff:-
done
) | convert -delay 20 - -loop 0 coffee_mug1_wallpaper_anim.gif
$0
endsnippet


snippet imPano2FishEye "Transforms a spherical panorama to a fisheye view." b
# USAGE: pano2fisheye [-p projection] [-v viewtype] [-d dimension] [-b bgcolor] [-f fade] [-s smooth] [-n newseed] infile outfile
Arguments:
-p orthographic
$0
endsnippet

snippet imShapeMorph "Creates a shape morphing animation sequence between two images." b
# USAGE: shapemorph [-f frames] [-d delay] [-p pause] [-r] [-m] "x1,y1 x2,y2" infile1 infile2 outfile
Arguments:
-r "73,56 57,68" (control points at the noses on the faces)
im_geometry_shapemorph.sh "73,56 57,68" morphA.gif morphB.gif out_mor.gif

# USAGE: shapemorph2 -c1 cpts1 -c2 cpts2 [-f frames] [-d delay] [-p pause] [-r] [-b bcolor] infile1 infile2 outfile # shapemorph2 [-h or -help]
# shapemorph2 -c1 cpts1 -c2 cpts2 [-f frames] [-d delay] [-p pause] [-r] [-b bcolor] infile1 infile2 outfile # shapemorph2 [-h or -help]
Arguments:
-c1 "73,56" -c2 "57,68" -r (control point at the noses on the faces)
im_geometry_shapemorph2.sh -c1 "73,56 53,38 65,80 63,4 94,38" -c2 "57,68 39,50 52,99 53,13 66,52" -r morphA.gif morphB.gif out_morph.gif
$0
endsnippet

snippet imTinyPlanet "Transforms a spherical panorama to a linear fisheye view.  " b
USAGE: tinyplanet [-d dimension] [-b bgcolor] [-r rotate] [-f fade] [-s smooth] [-t threshold] [-n newseed] [-I increment] [-D delay] [-L loop] infile outfile
Arguments:
-b white -d 400 -I 5 -D 20 -L 0
$0
endsnippet

snippet imWarplog "Resizes an image according to a logarithmic transformation.  " b
USAGE: warplog [-w width] [-h height] [-b bgcolor] infile outfile
Arguments: -w 512 (2x horizontal stretch)
$0
endsnippet

snippet imCrystallize "Creates random crystal-like regions in an image " b
# USAGE: crystallize [-n number] [-s seed] infile outfile
# USAGE: crystallize [-h|help]
Arguments: -n 500 -s 1 (defaults)
$0
endsnippet

snippet imDisperse "Applies a dispersion effect to an image.  " b
USAGE: disperse [-s scale] [-d amount] [-c granularity] infile outfile
USAGE: disperse [-h or -help]
Arguments: -s 5 -d 5 -c 5
$0
endsnippet

snippet imFxtransitions "Creates an animated transition between two images using a special effect distortion.  " b
USAGE: fxtransitions [-e effect] [-f frames] [-d delay] [-p pause] [-b bgcolor] [-r] infile1 infile2 [outfile]
USAGE: fxtransitions [-h or -help]
Arguments: -e swirl -f 18 -d 20 -p 50 -r
$0
endsnippet

snippet imScaleScroll "Creates a scaled scrolling animation.  " b
convert -size 600 -font "${font}" label:"啊哈哈，是我的"  -bordercolor white -border 50x0 text.jpg
USAGE: scalescroll [-f frames] [-d delay] [-D direction] infile outfile
# USAGE: scalescroll [-f frames] [-d delay] [-D direction] infile outfile
# wget http://www.fmwconcepts.com/imagemagick/scalescroll/images/bluecar_sm.jpg
im_image_effects_scalescroll.sh -D left bluecar_sm.jpg bluecar_sm.gif
$0
endsnippet

snippet imShimmer "Creates a reflected heat shimmering effect animation.  " b
USAGE: shimmer [-f frames] [-d delay] [-r rate] [-a amount] [-F fcolor] infile outfile
USAGE: shimmer [-h or -help]
Arguments: -r 2
$0
endsnippet

snippet imSineScrollImage "Creates a sinusoidal curved scrolling image animation.  " b
USAGE: sinescrollimage [-w width ] [-b bgcolor ] [-a amplitude ] [-r repeats] [-p phase] [-f frames] [-d delay] [-D direction] [-m mode ] [-R range] infile [bgfile] outfile
USAGE: sinescrollimage [-h or -help]
Arguments: -w 400 -b skyblue -a 1 -r 0.5 -m constant
$0
endsnippet

snippet imSineScrollImage "Creates a sinusoidal curved scrolling image animation.  " b
USAGE: sinescrollimage [-w width ] [-b bgcolor ] [-a amplitude ] [-r repeats] [-p phase] [-f frames] [-d delay] [-D direction] [-m mode ] [-R range] infile [bgfile] outfile
USAGE: sinescrollimage [-h or -help]
Arguments: -w 400 -b skyblue -a 1 -r 0.5 -m constant
$0
endsnippet

snippet imSineScrollText "Creates a sinusoidal curved scrolling text animation.  " b
USAGE: sinescrolltext -t "text" [-w width ] [-f font] [-c color] [-b bgcolor ] [-a amplitude ] [-r repeats] [-p phase] [-F frames] [-d delay] [-D direction] [-m mode ] [-R range] [infile] outfile
USAGE: sinescrolltext [-h or -help]
Arguments: -t "THIS IS A TEST OF SINESCROLL" -w 400 -f ubuntu -b skyblue -a 1 -r 0.5 -m constant
Arguments: -t "THIS IS A TEST OF SINESCROLL" -w 400 -f ubuntu -b skyblue -a 2 -r 2 -m constant
$0
endsnippet

snippet imStainedGlass "Applies a stained glass cell effect to an image.  " b
USAGE: stainedglass [-k kind] [-s size] [-o offset] [-n ncolors] [-b bright] [-e ecolor] [-t thick] [-r rseed] [-a] infile outfile
USAGE: stainedglass [-h or -help]
Arguments: -k random -b 150 -t 1 -r 56
$0
endsnippet

snippet imTransitions "Applies an animated transition between two images.  " b
USAGE: transitions [-m mode] [-f frames] [-d delay] [-p pause] [-r] [-e] infile1 infile2 maskfile [outfile]
USAGE: transitions [-h or -help]
Arguments: -m wipe -f 21 -d 10 -p 10
$0
endsnippet

snippet imTypeWriter "Creates a typewriter style scrolling text animation.  " b
USAGE: typewriter [-f font] [-p pointsize] [-t txtcolor] [-b bgcolor] textfile outfile USAGE: typewriter [-h or -help]
Arguments: -f CourierNewB -p 24 -t black -b white (defaults)
$0
endsnippet

snippet imWiggle "Creates a sinusoidal wiggling animation.  " b
USAGE: wiggle [-f frames] [-d delay] [-w wavelengths] [-D direction] [-a amount] infile outfile
USAGE: wiggle [-h or -help]
Arguments: -w 0.5
$0
endsnippet

snippet imZoomRotateText "Creates a zoomed rotating text animation.  " b
USAGE: zoomrotatetext -t "text" [-w width ] [-f font] [-c color] [-b bgcolor ] [-r revolutions] [-D direction] [-m mode ] [-p pause] [-F frames] [-d delay] [infile] outfile
USAGE: zoomrotatetext [-h or -help]
Arguments: -t "THIS IS A TEST OF ZOOMROTATE TEXT" -w 400 -f ubuntu -b pink -D cw -m 3 -F 30 -d 10 -p 10
$0
endsnippet

snippet imFlickerChannel "Displays and optionally save an animation of the channels in an image.  " b
USAGE: flickerchannel [-c channellist] [-d delay] [ -r resize] [-m colormodel] [-i] [-l] [-f] infile
USAGE: flickerchannel [-h or -help]
Arguments: -f -i
$0
endsnippet

snippet imsplitimage "Generates a side-by-side append of two partial images with an option to animate the amount of each image used in the append.  " b
USAGE: splitimage [-m mode] [-b begin] [-f final] [-i increment] [-d delay] [ -r resize] [-v] infile1 infile2 [outfile]
USAGE: splitimage [-h or -help]
Arguments: -m LR -i 10
$0
endsnippet


snippet imHalo "google open link" b
# crystallize [-n number] [-s seed] infile outfile
# wget http://www.fmwconcepts.com/imagemagick/halo/images/zelda1.jpg
im_image_effects_halo.sh -r 60 -w 60 -m 25 -c 127,100 zelda1.jpg zelda1.gif
$0
endsnippet


snippet iconvgbk2utf "iconv -f gbk -t utf-8 file" b
iconv -f gbk -t utf-8 1.txt > 2.txt
$0
endsnippet

snippet ffmpegVideo2Gif "video to gif convert" b
ffmpeg -ss 00:00:10 -t 3  -i test.mp4 -s  300x400 -r 15 test.gif -y # 从视频中第10秒开始，截取时长为3秒的片段,size 300*400 -r 视频提取15帧
convert output_video.gif -fuzz 20% -layers Optimize output_video2.gif
$0
endsnippet

snippet convList "image to gif" b
# USEFUL IMAGEMAGICK INFORMATION COMMANDS
convert -list               # list all functions
convert -list list          # list all -list options
convert -list channel       # list of all image -channel options
convert -list command       # list all commands
convert -list color         # list of all color names and values
convert -list colorspace    # list of all -colorspace options
convert -list compose       # list of all -compose options
convert -list configure     # list of your IM version information
convert -list decoration    # list of all text decorations
convert -list filter        # list of all -filter options
convert -list font          # list of all supported fonts (on your system)
convert -list format        # list of all image formats
convert -list gravity       # list of all -gravity positioning options
convert -list primitive     # list of all -draw primitive shapes
convert -list style         # list of all text styles
convert -list threshold     # list of all dither/halftone options
convert -list type          # list of all image types
convert -list virtual-pixel # list of all -virtual-pixel options
$0
endsnippet

snippet convImg2Gif "image to gif" b
convert -delay 100 *.png -loop 0  test.gif
# -delay n 迟延n*10毫秒 -loop n 播放n轮, 0表示不断地重复播放
convert -delay 400 -dispose background *.jpg -resize 668x476  -gravity Center -background white -extent 668x476 -loop 0  ani.gif
$0
endsnippet

snippet convAppendImage "convert append image" b
convert +append u0.png u1.png u.png

convert -size 512x512 -strip -colors 8 -depth 8 xc:none u0.png -geometry +0+0 -composite u1.png -geometry +256+0 -composite d0.png -geometry +0+256 -composite d1.png -geometry +256+256 -composite dest4.png

convert -size 512x512 -strip -colors 8 -depth 8 xc:none dest1.png
composite -geometry +0+0 u0.png dest1.png dest1.png
composite -geometry +256+0 u1.png dest1.png dest1.png
composite -geometry +0+256 d0.png dest1.png dest1.png
composite -geometry +256+256 d1.png dest1.png dest1.png
$0
endsnippet

snippet convdrawheart "convert draw heart" b
convert +antialias -size 80x80 -gravity center \
	-font WebDings label:Y   heart.gif
$0
endsnippet

snippet convdrawrrect "convert draw rect" b
convert -size 100x60 xc:skyblue -fill white -stroke black \
	-draw "roundrectangle 20,10 80,50 20,15"  draw_rrect.gif
$0
endsnippet

snippet convdWords2Gif "convert words to gif" b
convert -size 100x60 xc:skyblue -fill white -stroke black \
	-font Candice -pointsize 40 -gravity center \
	-draw "text 0,0 'Hello'"   draw_text.gif
$0
endsnippet

snippet convdWords2Gif "convert words to gif" b
convert lena.jpg -fill white -font arial -pointsize 24 -gravity center -annotate +0+100 "testing" lena_text1.jpg
convert lena.jpg -fill white -font arial -pointsize 24 -gravity center -annotate +0+75 "testing" lena_text2.jpg
convert lena.jpg -fill white -font arial -pointsize 24 -gravity center -annotate +0+50 "testing" lena_text3.jpg
convert lena.jpg -fill white -font arial -pointsize 24 -gravity center -annotate +0+25 "testing" lena_text4.jpg
convert lena.jpg -fill white -font arial -pointsize 24 -gravity center -annotate +0+0 "testing" lena_text5.jpg
convert -delay 50 lena_text*.jpg -loop 0 -layers optimize lena_anim.gif
convert -delay 50 lena_text*.jpg ( -clone 0--1 -reverse ) -loop 0 -layers optimize lena_anim2.gif
$0
endsnippet

snippet convdrawtext "convert draw text" b
convert -size 100x60 xc:skyblue -fill white -stroke black \
	-font Candice -pointsize 40 -gravity center \
	-draw "text 0,0 'Hello'"   draw_text.gif
$0
endsnippet

snippet gimpBatch "gimp batch process" b
http://gimpchat.com/viewtopic.php?f=9&t=15024
Execute 1: ./save-xcf-to-png-01.sh sample.xcf
#!/bin/bash
declare -r xcfFile="${1:?Missing xcf Input File}"

gimp -idf --batch-interpreter=python-fu-eval -b - << EOF
import gimpfu

def convert(filename):
  img = pdb.gimp_file_load(filename, filename)
  new_name = filename.rsplit(".",1)[0] + ".png"
  layer = pdb.gimp_image_merge_visible_layers(img, 1)

  pdb.gimp_file_save(img, layer, new_name, new_name)
  pdb.gimp_image_delete(img)

convert('${xcfFile}')

pdb.gimp_quit(1)
EOF
Execute 2: gimp -idf --batch-interpreter=python-fu-eval -b - < save-xcf-to-png-02.py
# Note required here, see: /usr/lib/gimp/2.0/plug-ins/python-eval.py
# from gimpfu import *
from glob import glob

def convert(filename):
  print "Filename: " + filename
  img = pdb.gimp_file_load(filename, filename)
  new_name = filename.rsplit(".",1)[0] + ".png"
  layer = pdb.gimp_image_merge_visible_layers(img, 1)

  pdb.gimp_file_save(img, layer, new_name, new_name)
  pdb.gimp_image_delete(img)

for filename in glob("*.xcf"):
  convert(filename)

pdb.gimp_quit(1)

Execute 3: gimp -idf -b '(python-fu-save-xcf-files-to-png RUN-NONINTERACTIVE "sample.xcf")' -b '(gimp-quit 0)'
from gimpfu import *
# from glob import glob

def convert_images(filename):
  print "Filename: " + filename
  img = pdb.gimp_file_load(filename, filename)
  new_name = filename.rsplit(".",1)[0] + ".png"
  layer = pdb.gimp_image_merge_visible_layers(img, 1)

  pdb.gimp_file_save(img, layer, new_name, new_name)
  pdb.gimp_image_delete(img)

register(
  "save_xcf_files_to_png",
  "Save xcf files to png",
  "Save xcf files to png",
  "test",
  "test",
  "2016",
  "<Toolbox>/MyScripts/Examples/Ex12: Save xcf files to png...",
  "",
  [
    (PF_STRING, "filename", "_String:", None)
  ],
  [],
  convert_images
  )

main()


$0
endsnippet

snippet gimpBatch "gimp batch process" b
GIMPPATH=/Applications/GIMP-2.10.app/Contents/MacOS/
code=$(cat <<END
import sys;
sys.path=['/Users/dc/Library/Application Support/GIMP/2.10/plug-ins']+sys.path;

import perspective_border;
perspective_border.run('WechatIMG2158.jpeg', 
    frame_percent=10, 
    keep_aspect=1, 
    mirror=1, 
    drop_shadow=1, 
    shadow_offset_x=2,
    shadow_offset_y=2,
    shadow_blur=15,
    shadow_opacity=60);
END
);

$GIMPPATH/gimp-console -idf --batch-interpreter python-fu-eval -b "${code}"
# 请注意:
# chmod a+x /Users/dc/Library/Application\ Support/GIMP/2.10/plug-ins/*.py
# 使用 gimp-console-2.8.exe而不是 gimp-2.8.exe避免在执行结束时不必要的击键
# 在函数名前加上 python-fu-
# 使用 - 's 而不是 _的名字
# 添加通用(和必要)RUN-NONINTERACTIVE论据
# 在您的脚本中，不要使用调用显示的函数，例如 DISPLAY = gimp.Display( IMAGE ) ，这会使脚本失败并显示 gimp-console-2.8.exe


$0
endsnippet

snippet findSed "find file and sed file" b
find . -iname '*.java' -type f -exec sed -i 's/old/REPLACEMENT/g' {} +;
$0
endsnippet
snippet findVim "find file and vim file" b
find . -iname '*.py'   -type f -exec vim -c '%s/PATTERN/REPLACEMENT/gc' -c 'wq' {} \;
$0
endsnippet

snippet findUnzip "find zip and unzip file" b
find . -iname '*.zip'  -type f -exec bash -c 'cd \`dirname ${1}\`  && unzip -d dir \`basename ${1}\`' _ {} \;
$0
endsnippet

snippet unzip "find zip and unzip file" b
1、把文件解压到当前目录下
unzip file.zip
2、如果要把文件解压到指定的目录下，需要用到-d参数。
unzip -d ./tmp/ file.zip
3、解压的时候，有时候不想覆盖已经存在的文件，那么可以加上-n参数
unzip -n file.zip
unzip -n -d ./tmp/ file.zip
4、只看一下zip压缩包中包含哪些文件，不进行解压缩
unzip -l file.zip
5、查看显示的文件列表还包含压缩比率
unzip -v file.zip
6、检查zip文件是否损坏
unzip -t file.zip
7、将压缩文件file.zip在指定目录tmp下解压缩，如果已有相同的文件存在，要求unzip命令覆盖原先的文件
unzip -o file.zip -d ./tmp
$0
endsnippet

snippet findGrepGrep "find file and grep and grep file" b
find . -iname 'name' -type f -exec grep -q FIND {} \; -exec grep -l ME {} \;
$0
endsnippet
snippet findRenameByIndex "find file and rename by index" b
find file and rename by index
$0
endsnippet
snippet findRenameBySubs "find file and rename by substitute" b
find file and rename by substitute
$0
endsnippet
snippet findInumMv "find by inum file and rename file" b
find . -maxdepth 1 -inum 000  -exec mv {} newname \;
$0
endsnippet
snippet grepFormwork "grep formwork" b
grep -irn --include="*.py" --include="*.java" --include="*.go" --exclude-dir={proc,boot,build} "" .
$0
endsnippet
snippet grepSed "grep sed" b
grep -irl '' . | xargs sed -i 's/old/new/g'
$0
endsnippet
snippet grepVimSubstitute "grep vim substitute" b
grep -irl 'pattern' -exec vim -c '%s/PATTERN/REPLACEMENT/gc' -c 'wq' {} \;
$0
endsnippet
snippet findGrepGOBuild "find go main file and build it" b
find .  -name '*.go' -type f -exec bash -c 'grep -iq "func main" "${1}" && cd `dirname ${1}` && go build' _ {} \;
$0
endsnippet
snippet findCatCmd "find file and concatenate file" b
find . -iname "*.md" -exec cat  {} + >> README.md
find . -iname "*.md" -exec more {} + >> README.md
find . -iname "*.md" -printf '\n:::::::\n%p\n::::::\n' -exec cat {} \\; > README.md
find . -iname "*.md" -exec head {} + >> README.md
find . -iname "*.md" -exec head {} + >> README.md
$0
endsnippet

snippet findCat "find file and concatenate file" b
cd BFS                  ; rename -e 's/^\d+/sprintf("%04d",$&)/e' -- */ ; cd ~/5W/README/LeetCode/
echo "Start!"
while IFS= read -r line; do
  fieldName=`echo "${line}" |cut -d/ -f 2`
  fileName="cpp_""${fieldName}"".snippets"
  snipName=`echo "${line}" |cut -d/ -f 3`

  echo "$line"
  echo "${fileName}"
  echo "${snipName}"

  echo "" >> ${fileName}
  echo "# ==> ${line} <==" >> ${fileName}
  echo "snippet $snipName \"${snipName}\" b" >> ${fileName}
  cat "${line}" >> ${fileName}

  echo "" >> ${fileName}
  echo "\$0" >> ${fileName}
  echo "endsnippet" >> ${fileName}

done < "$1"
$0
endsnippet
snippet findSortCat "find file and concatenate file" b
find . -type f -print0 | sort -z | xargs -r0 more > sha256SumOutput
$0
endsnippet
snippet findMove "find file and move remove file" b
find . -type f -iname '*.cpp' -exec mv {} ./test/ \;
find . -type f -iname "*FILE-TO-FIND*" -exec rm -rf {} \;
$0
endsnippet
snippet printf2file "print string to file" b
printf '' | xsel -i -b
printf '' > /tmp/registeri
$0
endsnippet

snippet removeSecurely "Securely remove" b
shred -zuv file	# Securely remove your file by overwritting then removing
$0
endsnippet
snippet pasteColumn "paste column joins files column-wise fashion" b
paste -d";" file1.txt file2.txt
paste joins files together in a column-wise fashion. Another way to think about this is in contrast to cat, which joins files vertically. For example:
$0
endsnippet
snippet aliasFormwork "alias Formwork" b
alias cp="cp -R"
$0
endsnippet
snippet viewColumn "view file space as column" b
cat myfile.txt | column -t
# Suppose you have a file with fields of variable length. Viewing it in the terminal can be messy because, if a field in one row is longer than one in another, it will upset the spacing of the columns. You can remedy this as follows:
$0
endsnippet
snippet splitFile "split file by lines" b
split -l 3 -d test.txt test_split_
# If we want to split this file into sub-files with 3 lines each, we can use:
$0
endsnippet
snippet securityFile "security File" b
gpg --full-generate-key
# Here are the basics about gpg. The first thing to do is to generate a public/private key pair for yourself:
$0
endsnippet

snippet collapseRows "Rounded Rectangle" b
cat file.txt | datamash -g 1 collapse 2 -s -W
# Collapse rows in one column based on a common ID in another column:
# GNU datamash is a great program for crunching through text files and collapsing rows on a common ID or computing basic statistics. Here are some simple examples of what it can do.
$0
endsnippet
snippet listDir "list directorys" b
# list directorys
ls -dtalh */ 
# list directorys first
ls -dtah */ | head -1
# list directorys last
ls -dtah */ | tail -1
# list file
ls -ptalh . | grep -v /
# list file first
ls -ptah . | grep -v / | head -1
# list file last
ls -ptah . | grep -v / |tail -1
# list .
ls -d .*
$0
endsnippet

snippet wgetUrl "wget url file" b
wget -c "www.baidu.com" -O baidu.index.html -o wget.log
$0
endsnippet

snippet xlsx2csv "excel convert to csv" b
for file in *.xlsx; do
    nombre=${file:0:${#file}-5};
    name="$nombre-%n-%s.csv";
    ssconvert --export-type=Gnumeric_stf:stf_csv --export-file-per-sheet ${file} ${name};
done
echo "Finish!"
$0
endsnippet

snippet javaRunClass "java run class" b
java -classpath app/build/classes/java/main/ code.App
jdb  -sourcepath app/src/main/java/ -classpath app/build/classes/java/main/ code.App
$0
endsnippet

snippet snipTestShell "snip test shell" b
clear
ls -al
jobs -l
$0
endsnippet

# vim:ft=snippets:

snippet gitpush "git add ,commit, push" b
git add .
git commit -m "DC"
git push gitee
git push github
$0
endsnippet
snippet gitDiff "git diff" b
git difftool -- . ':!*.mp3' ':!*.mp4' ':!*.awv' ':!*.png' ':!*.jpg' --extcmd vimdiff HEAD~1 stash@{0} location/filename
$0
endsnippet

snippet gitLog "git log" b
git log --all --graph --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ci) %C(bold blue)<%an>%Creset" --abbrev-commit --date=relative
$0
endsnippet
snippet gitInit "git init repo " b
git config --global user.name "DC-Melo"
git config --global user.email "melo.dachor@gmail.com"
# 创建 git 仓库:
mkdir tname
cd tname
git init
touch README.md
git add README.md
git commit -m "first commit"
git remote add origin https://gitee.com/dc-melo/tname.git
git push -u origin "master"
# 已有仓库?
cd existing_git_repo
git remote add origin https://gitee.com/dc-melo/tname.git
git push -u origin "master"
$0
endsnippet

snippet gitClone "git clone " b
git clone https://gitee.com/dc-melo/README "new folder"
git init
git remote add origin <remote_url>
git fetch --all --prune
git checkout master
git add -A .
git commit -m "Adding my files..."
$0
endsnippet

snippet gitRepoListGithub "git clone " b
curl -X GET -u ${GITHUB_USER}:${GITHUB_TOKEN} "https://api.github.com/users/$GITHUB_USER/repos?perpage=100"
curl -X GET -u ${GITHUB_USER}:${GITHUB_TOKEN} "https://api.github.com/users/$GITHUB_USER/repos?perpage=100" | python3 -c 'import json, sys; sys.stdout.buffer.write(json.dumps(json.loads(sys.stdin.read()), indent=4,ensure_ascii=False).encode("utf8"))' | grep -w "\(cloneurl\)\|\(description\)" |awk '{x = $0; getline; printf "%s ",$0; print x}'|nl
$0
endsnippet

snippet gitViewBigFile "git clone " b
git rev-list --objects --all | git cat-file --batch-check="%(objecttype) %(objectname) %(objectsize) %(rest)" | sed -n "s/^blob //p" | sort --numeric-sort --key=2 | cut -c 1-12,41- | $(command -v gnumfmt || echo numfmt) --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest
$0
endsnippet

snippet gitRemoveBigFile "git clone " b
git filter-branch --index-filter "git rm -rf --cached --ignore-unmatch docs/media/CAN_simulation.gif" 42a24c8ec64f
$0
endsnippet

snippet gitRepoClear "repo clear " b
curl -X PUT --header 'Content-Type: application/json;charset=UTF-8' 'https://gitee.com/api/v5/repos/owenr/repo/clear' -d '{"access_token":"84ace52bd1bd6f087f72c9666bda3026"}'
$0
endsnippet

snippet gitRepoDelete "repo delete" b
curl -X PUT --header 'Content-Type: application/json;charset=UTF-8' 'https://gitee.com/api/v5/repos/owenr/repo/clear' -d '{"access_token":"84ace52bd1bd6f087f72c9666bda3026"}'
$0
endsnippet

snippet gitRepoCreate "repo create" b
generate_post_data()
{
  cat <<EOF
{
  "account": {
    "email": "$email",
    "screenName": "$screenName",
    "type": "$theType",
    "passwordSettings": {
      "password": "$password",
      "passwordConfirm": "$password"
    }
  },
  "firstName": "$firstName",
  "lastName": "$lastName",
  "middleName": "$middleName",
  "locale": "$locale",
  "registrationSiteId": "$registrationSiteId",
  "receiveEmail": "$receiveEmail",
  "dateOfBirth": "$dob",
  "mobileNumber": "$mobileNumber",
  "gender": "$gender",
  "fuelActivationDate": "$fuelActivationDate",
  "postalCode": "$postalCode",
  "country": "$country",
  "city": "$city",
  "state": "$state",
  "bio": "$bio",
  "jpFirstNameKana": "$jpFirstNameKana",
  "jpLastNameKana": "$jpLastNameKana",
  "height": "$height",
  "weight": "$weight",
  "distanceUnit": "MILES",
  "weightUnit": "POUNDS",
  "heightUnit": "FT/INCHES"
}
EOF
}
curl -i \
-H "Accept: application/json" \
-H "Content-Type:application/json" \
-X POST --data "$(generate_post_data)" "https://xxx:xxxxx@xxxx-www.xxxxx.com/xxxxx/xxxx/xxxx"


curl -X PUT --header 'Content-Type: application/json;charset=UTF-8' 'https://gitee.com/api/v5/repos/owenr/repo/clear' -d '{"access_token":"84ace52bd1bd6f087f72c9666bda3026"}'
name="name"; des="description"; 
curl -X POST --header 'Content-Type: application/json;charset=UTF-8' 'https://gitee.com/api/v5/user/repos' -d '{"access_token":"'"${GITEE_TOKEN}"'","name":"'"${name}"'","description":"'"${des}"'","private":"false","homepage":"http://www.dc-melo.com","has_issues":"true","has_wiki":"true","can_comment":"true","auto_init":"false","license_template":"MIT"}'; 
curl -u $GITHUB_USER:$GITHUB_TOKEN https://api.github.com/user/repos -d '{"name":"'"${name}"'","description":"'"${des}"'","private":"false"}'; 
git clone git@gitee.com:dc-melo/${name}.git
$0
endsnippet

snippet gitRepoUpdate "repo update" b
curl -X PATCH --header 'Content-Type: application/json;charset=UTF-8' 'https://gitee.com/api/v5/repos/ower/repo' -d '{"access_token":"84ace52bd1bd6f087f72c9666bda3026","name":"name","has_issues":"true","has_wiki":"true","can_comment":"true"}'
$0
endsnippet

snippet gitRepoList "repo List" b
curl -X PATCH --header 'Content-Type: application/json;charset=UTF-8' 'https://gitee.com/api/v5/repos/ower/repo' -d '{"access_token":"84ace52bd1bd6f087f72c9666bda3026","name":"name","has_issues":"true","has_wiki":"true","can_comment":"true"}'
$0
endsnippet

snippet gitRepoInfo "repo Info" b
curl -X PATCH --header 'Content-Type: application/json;charset=UTF-8' 'https://gitee.com/api/v5/repos/ower/repo' -d '{"access_token":"84ace52bd1bd6f087f72c9666bda3026","name":"name","has_issues":"true","has_wiki":"true","can_comment":"true"}'
$0
endsnippet

snippet gitConmand "repo Info" b
#gitConfigLocal=$(cat <<END
#git config --local user.email "pdwjwang@tencent.com";
#git config --local user.name "pdwjwang";
#END
#);
#gitConfigGlobal=$(cat <<END
#git config --global user.email "melo.dachor@gmail.com";
#git config --global user.name "DC-Melo";
## git config --system user.email "you@example.com";
## git config --system user.name "Your Name";
#END
#);
#gitConfigMergeTool=$(cat <<END
#git config --global merge.tool vimdiff;
#git config --global mergetool.keepBackup false;
#git config --global mergetool.prompt false;
#END
#);
#gitMergeAbort=$(cat <<END
#git merge --abort;
#git reset --merge;
#END
#);
###repo command
## git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
#gitLog=$(cat <<END
#git log --all --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ci) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
#END
#);
#gitDiff=$(cat <<END
#git difftool -- . ':!*.mp3' ':!*.mp4' ':!*.awv' ':!*.png' ':!*.jpg' --extcmd vimdiff HEAD~1 stash@{0} location/filename
#END
#);
#gitShow=$(cat <<END
#git show REVISION:path/to/file
#END
#);
#gitAddExcept=$(cat <<END
#git add --all -- ":!file1" ":\!file2" 
#END
#);
## git ls-files | while read f; do git blame -w -M -C -C --line-porcelain "\$f" | grep -I '^author '; done | sort -f | uniq -ic |awk '{lines[\$3]=\$1;sum=sum+\$1} END{for (i in lines) printf("%d\t%d%\t%s\n",lines[i],(lines[i]/sum)*100,i)}' | sort -n --reverse 
#gitContribute=$(cat <<END
#git ls-tree -z -r --name-only HEAD -- */*.py | xargs -0n1 git blame -w --show-email | perl -n -e '/^.*?\((.*?)\s+[\d]{4}/; print \$1,"\n"' | sort -f | uniq -c |awk '{lines[\$2]=\$1;sum=sum+\$1} END{for (i in lines) printf("%d\t%d%\t%s\n",lines[i],(lines[i]/sum)*100,i)}' | sort -n --reverse
#END
#);
## name="name"; des="description"; curl -X POST --header 'Content-Type: application/json;charset=UTF-8' 'https://gitee.com/api/v5/user/repos' -d '{"access_token":"'\${GITEE_TOKEN}'","name":"'\${name}'","description":"'\${des}'","homepage":"https://dc-melo.com","has_issues":"true","has_wiki":"true","can_comment":"true","gitignore_template":"Gradle","license_template":"MIT","private":"false"}'; curl -u \$GITHUB_USER:\$GITHUB_TOKEN https://api.github.com/user/repos -d '{ "name":"'\${name}'","description":"'\${des}'" }'; git clone git@gitee.com:dc-melo/\${name}.git
#gitRepoCreate=$(cat <<END
#name="name"; des="description"; \
#curl -X POST --header 'Content-Type: application/json;charset=UTF-8' 'https://gitee.com/api/v5/user/repos' \
#-d '{"access_token":"'"\${GITEE_TOKEN}"'","name":"'"\${name}"'","description":"'"\${des}"'","private":"false","homepage":"http://www.dc-melo.com","has_issues":"true","has_wiki":"true","can_comment":"true","auto_init":"false","license_template":"MIT"}'; \
#curl -u \$GITHUB_USER:\$GITHUB_TOKEN https://api.github.com/user/repos \
#-d '{"name":"'"\${name}"'","description":"'"\${des}"'","private":"false"}'; git clone git@gitee.com:dc-melo/\${name}.git
#END
#);
#gitAddDescriptionGithub=$(cat <<END
#name=\$(git remote get-url origin |grep -Po '(?<=dc-melo/)\S*(?=.git)'); \
#curl -X PATCH -u \$GITHUB_USER:\$GITHUB_TOKEN https://api.github.com/repos/DC-Melo/\$name -d '{ "description":"new des" }'
#END
#);
## name=\`git remote get-url origin |grep -Po '(?<=dc-melo/)\S*(?=.git)'\`;curl -X PATCH -u $GITHUB_USER:$GITHUB_TOKEN https://api.github.com/repos/DC-Melo/$name -d '{ "description":"new des" }'
#gitAddUrl=$(cat <<END
#REPO=\$(git remote get-url origin |grep -Pio '(?<=dc-melo/)\S*(?=.git)');
#git remote add github git@github.com:DC-Melo/\${REPO}.git;
#git remote add gogs   ssh://git@10.1.21.240:11022/DC-Melo/\${REPO}.git;
#git remote -v
#END
#);
#gitAddUrlGithub=$(cat <<END
#name=\$(git remote get-url origin |grep -Po '(?<=dc-melo/)\S*(?=.git)');git remote add github git@github.com:DC-Melo/\$name.git; git remote -v
#END
#);
#gitAddUrlGogs=$(cat <<END
#name=\$(git remote get-url origin |grep -Po '(?<=dc-melo/)\S*(?=.git)');git remote add gogs ssh://git@10.1.21.240:11022/DC-Melo/\$name.git; git remote -v
#END
#);
#gitRepoCreateGitee=$(cat <<END
#name="name"; des="description"; \
#curl -X POST --header 'Content-Type: application/json;charset=UTF-8' 'https://gitee.com/api/v5/user/repos' \
#-d '{"access_token":"'\${GITEE_TOKEN}'","name":"'\${name}'","description":"'"\${des}"'","homepage":"http://www.dc-melo.com","has_issues":"true","has_wiki":"true","can_comment":"true","auto_init":"false","gitignore_template":"Gradle","license_template":"MIT","private":"false"}'
#END
#);
## curl -X GET --header 'Content-Type: application/json;charset=UTF-8' 'https://gitee.com/api/v5/user/repos?access_token='\${GITEE_TOKEN}'&sort=created&page=1&perpage=1000' |python3 -c 'import json, sys; sys.stdout.buffer.write(json.dumps(json.loads(sys.stdin.read()), indent=4,ensure_ascii=False).encode("utf8"))' |grep "ssh_url" |nl
#gitRepoListGitee=$(cat <<END
#curl -X GET --header 'Content-Type: application/json;charset=UTF-8' 'https://gitee.com/api/v5/users/DC-Melo/repos?access_token='\${GITEE_TOKEN}'&type=all&sort=full_name&page=1&per_page=2000' | \
#python3 -c 'import json, sys; sys.stdout.buffer.write(json.dumps(json.loads(sys.stdin.read()),indent=4,ensure_ascii=False).encode("utf8"))' |grep "ssh_url" |nl
#END
#);
#gitRepoListGithub=$(cat <<END
#curl -X GET --header 'Content-Type: application/json;charset=UTF-8' 'https://api.github.com/users/DC-Melo/repos?per_page=100&page=1' | \
#python3 -c 'import json, sys; sys.stdout.buffer.write(json.dumps(json.loads(sys.stdin.read()),indent=4,ensure_ascii=False).encode("utf8"))' |grep "ssh_url" |nl
#END
#);
#gitRepoTagGitee=$(cat <<END
#curl -X GET --header 'Content-Type: application/json;charset=UTF-8' 'https://gitee.com/api/v5/repos/DC-Melo/repo/tags?access_token='\${GITEE_TOKEN}
#END
#);
#gitRepoDelete=$(cat <<END
#name="name"; \
#curl -X DELETE -u \$GITEE_USER:\$GITEE_TOKEN   https://gitee.com/api/v5/repos/DC-Melo/"\${name}"; \
#curl -X DELETE -u \$GITHUB_USER:\$GITHUB_TOKEN https://api.github.com/repos/DC-Melo/"\${name}"
#END
#);
## curl -X DELETE --header 'Content-Type: application/json;charset=UTF-8' "https://gitee.com/api/v5/repos/\${GITEE_USER}/reponame?access_token=\${GITEE_TOKEN}"
#gitRepoDeleteGitee=$(cat <<END
#name="name"; \
#curl -X DELETE -u \$GITEE_USER:\$GITEE_TOKEN https://gitee.com/api/v5/repos/DC-Melo/"\${name}"
#END
#);
#gitRepoDeleteGithub=$(cat <<END
#name="name"; \
#curl -X DELETE -u \$GITHUB_USER:\$GITHUB_TOKEN https://api.github.com/repos/DC-Melo/"\${name}"
#END
#);
#gitRepoCreateGithub=$(cat <<END
#name="name"; des="description"; \
#curl -X POST -u \$GITHUB_USER:\$GITHUB_TOKEN https://api.github.com/user/repos \
#-d '{"homepage":"https://github.com", "private": false, "description":"'\${des}'","name":"'"\${name}"'" }'
#END
#);
#gitRepoDescriptionGithub=$(cat <<END
#curl -X GET -u \${GITHUB_USER}:\${GITHUB_TOKEN} "https://api.github.com/users/\$GITHUB_USER/repos?perpage=100" | python3 -c 'import json, sys; sys.stdout.buffer.write(json.dumps(json.loads(sys.stdin.read()), indent=4,ensure_ascii=False).encode("utf8"))' | grep -w "\(cloneurl\)\|\(description\)" |awk '{x = \$0; getline; printf "%s ",\$0; print x}'|nl
#END
#);
#httpGet=$(cat <<END
#curl -X GET -u \${GITHUB_USER}:\${GITHUB_TOKEN} "https://api.github.com/users/\$GITHUB_USER/repos?perpage=100" 
#END
#);
## https://<your gogs domain>/api/v1
## curl -X POST -u \${GOGS_USER}:\${GOGS_TOKEN} https://api.github.com/user/repos -d '{"homepage":"https://github.com", "private": false, "description":"description","name":"n" }'
#gitRepoCreateGogs=$(cat <<END
#REPO="repoName";
#URL="http://10.1.21.240:10081/api/v1";
#curl 
#-H "Content-Type: application/json" 
#-H "Authorization: token \${GOGS_TOKEN}" 
#-X POST \${URL}/user/repos
#-d '{"homepage":"https://github.com", "private": false, "description":"description","name":"reponame" }'
#END
#);
#gitRepoDeleteGogs=$(cat <<END
#REPO="repoName"
#URL="http://10.1.21.240:10081/api/v1";
#curl 
#-H "Authorization: token \${GOGS_TOKEN}" 
#-X DELETE ${URL}/repos/\${GOGS_USER}/${REPO}
#END
#);

#gitBigFile=$(cat <<END
#git rev-list --objects --all |   git cat-file --batch-check="%(objecttype) %(objectname) %(objectsize) %(rest)" |   sed -n "s/^blob //p" |   sort --numeric-sort --key=2 |   cut -c 1-12,41- |   \$(command -v gnumfmt || echo numfmt) --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest
#END
#);
## git filter-branch  --tree-filter "rm -f something/really/large.iso"  -- --all
#gitRemoveFile=$(cat <<END
#git filter-branch --force --index-filter 'git rm -rf --cached --ignore-unmatch \$文件名字' --prune-empty --tag-name-filter cat -- --all
#END
#);
#gitRemoveUpdate=$(cat <<END
#rm -rf .git/refs/original/;
#git reflog expire --expire=now --all;
#git gc --prune=now;
#git gc --aggressive --prune=now;
## 如果这一步有权限不足的问题，需要手动到github上将master分支的保护去掉;
#git push origin master --force;
## 清理远程仓库;
#git remote prune origin;
#git remote prune github;
#END
#);
#gitReadme=$(cat <<END
#cp -i -r /usr/coderoot/opt/4T/templete/standard-readme/readme_files /usr/coderoot/opt/4T/templete/standard-readme/README.md  . ;name=\$(git remote -v |grep -Po "(?<=dc-melo/)\S*(?=.git\s*\(push\))");find . -type f -name "*.md" -exec sed -i "s/standard-readme/'\${name}'/g" {} +;
#END
#);
#goBuild=$(cat <<END
#CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build demo.go
#END
#);
#trimSpace=$(cat <<END
#for f in *; do mv "$f" `echo $f | tr ' ' '_'`; done
#END
#);
$0
endsnippet
