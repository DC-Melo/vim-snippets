priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49
###########################################################################
#			    Global functions 						  #
###########################################################################

global !p

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]


endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################

snippet mainAppFW "main and App"
/* code by 王江 DC-Melo */
#include <string>
#include <vector>
#include <chrono>
#include <iostream>
using namespace std;
class App
{
public:
    App() {}
    ~App() {}
private:
};
int main() {
    return 0;
}
$0
endsnippet

snippet printDuration "print duration"
/* timestamp begin */
auto tBegin = std::chrono::high_resolution_clock::now();
/* code heer */

/* timestamp end */
auto tEnd = std::chrono::high_resolution_clock::now();
auto duration = std::chrono::duration_cast<std::chrono::microseconds>( tEnd - tBegin).count();
std::cout << "\nprogram cust " <<  duration <<" microseconds" << std::endl;
$0
endsnippet

snippet initInclude "init include "
using namespace std;
// #include <bits/stdc++.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include "math.h"
#include <string>
#include <set>
#include <sstream>
#include <cstring>
#include <ctime>
#include <vector>
#include <iostream>
#include <unordered_map>
#include <chrono>
$0
endsnippet
######################################################################
#   Array                                                            #
######################################################################
snippet initArray "Initializing a array"
int ${1:arr}[] = { 1, 2, 3, 4, 5 };
int $1[100] = {0};
$0
endsnippet
snippet printArray "loop through the array elements"
for (size_t i = 0; i < sizeof(${1:arr})/sizeof($1[0]); i++) std::cout << $1[i] << '\t'; std::cout << std::endl;
$0
endsnippet
snippet printArray "Print contents of an array in C++ using range-based for-loop"
for (const auto &value : ${1:arr})  std::cout << value << '\t'; std::cout << std::endl;
$0
endsnippet

######################################################################
#   2D Array                                                         #
######################################################################

snippet initArray2D "Initializing a array"
int ${1:arr2d}[][4] = { {1,2,3,4}, {5,6,7,8} };
$0
endsnippet
snippet printArray2D "loop through the array elements"
for (int i = 0; i < sizeof(${1:arr2d}) / sizeof($1[0]); ++i) {for (int j = 0; j < sizeof($1[0]) / sizeof($1[0][0]); ++j) std::cout << $1[i][j] << "\t"; std::cout << std::endl;}
$0
endsnippet

######################################################################
#   vector                                                           #
######################################################################
snippet initVector "Initializing like arrays"
vector<int> ${1:vect}{ 10, 20, 30 };
$0
endsnippet
snippet initVector "Initializing from an array"
int arr[] = { 10, 20, 30 };
int n = sizeof(arr) / sizeof(arr[0]);
vector<int> ${1:vect}(arr, arr + n);
$0
endsnippet
snippet initVector "Specifying size and initializing all values"
vector<int> ${1:vect}(3, 10);
$0
endsnippet
snippet initVector "Initializing by pushing values one by one"
vector<int> ${1:vect};
$1.push_back(10);
$1.push_back(20);
$1.push_back(30);
$0
endsnippet
snippet printVector " print vector "
for (auto x : ${1:vect}) std::cout << x << "\t"; std::cout << std::endl;
$0
endsnippet
snippet printVector " print vector "
for (auto i = ${1:vect}.begin(); i != $1.end(); ++i) std::cout << *i << '\t';std::cout << std::endl;
$0
endsnippet
snippet printVector " print vector "
for (int i = 0; i < ${1:vect}.size(); i++)  std::cout << $1[i] << "\t";std::cout << std::endl;
$0
endsnippet

######################################################################
#   matrix                                                           #
######################################################################
snippet initMatrix "Initializing a 2D Vector i.e. vector of vectors"
vector<vector<char>> matrix = { {'1','2' ,'3' ,'4' ,'a'  },
								{'6','7' ,'8' ,'9' ,'b'  },
								{'5','6' ,'8' ,'1' ,'c'  },
								{'1','7' ,'2' ,'4' ,'d'  },
							 };
$0
endsnippet
snippet printMatrix "Initializing a 2D Vector i.e. vector of vectors"
for ( const auto &v : matrix ) { for ( auto x : v ) std::cout << x << '\t'; std::cout << std::endl; }
$0
endsnippet
snippet printMatrix "Initializing a 2D Vector i.e. vector of vectors"
for (int i = 0; i < ${1:matrix}.size(); i++) { for (int j = 0; j < $1[i].size(); j++)  cout << $1[i][j] << "\t"; std::cout << endl; }
$0
endsnippet

######################################################################
#  singly linked list                                                #
######################################################################
snippet singlyLinkedListDefinition "Definition for singly-linked list."
struct ListNode {
	int val;
	ListNode *next;
	ListNode() : val(0), next(nullptr) {}
	ListNode(int x) : val(x), next(nullptr) {}
	ListNode(int x, ListNode *next) : val(x), next(next) {}
};
$0
endsnippet
snippet printListNode "init list node"
ListNode* head = new ListNode(0);
for(ListNode* pi =l2;pi!=NULL;pi=pi->next) cout<<pi->val << " "; std::cout << std::endl;
ListNode* ptr =head;
while(ptr!=NULL){
	cout<<ptr->val<<"\t";
	ptr = ptr->next;
}
$0
endsnippet


######################################################################
#  tree                                                              #
######################################################################
snippet treeNodeDefination "Definition for a binary tree node.  "
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

$0
endsnippet

snippet printBinaryTree "Print binary tree structure with its contents"
// Data structure to store a binary tree node
struct Trunk
{
    Trunk *prev;
    string str;

    Trunk(Trunk *prev, string str)
    {
        this->prev = prev;
        this->str = str;
    }
};

// Helper function to print branches of the binary tree
void showTrunks(Trunk *p)
{
    if (p == nullptr) {
        return;
    }

    showTrunks(p->prev);
    cout << p->str;
}

void printTree(TreeNode* root, Trunk *prev, bool isLeft)
{
    if (root == nullptr) {
        return;
    }

    string prev_str = "    ";
    Trunk *trunk = new Trunk(prev, prev_str);

    printTree(root->right, trunk, true);

    if (!prev) {
        trunk->str = "———";
    }
    else if (isLeft)
    {
        trunk->str = ".———";
        prev_str = "   |";
    }
    else {
        trunk->str = "\`———";
        prev->str = prev_str;
    }

    showTrunks(trunk);
    cout << " " << root->val << endl;

    if (prev) {
        prev->str = prev_str;
    }
    trunk->str = "   |";

    printTree(root->left, trunk, false);
}

int main()
{
    // Construct above tree
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);
    root->right->left = new TreeNode(6);
    root->right->right = new TreeNode(7);
    root->left->left->left = new TreeNode(8);
    root->left->left->right = new TreeNode(9);
    root->left->right->left = new TreeNode(10);
    root->left->right->right = new TreeNode(11);
    root->right->left->left = new TreeNode(12);
    root->right->left->right = new TreeNode(13);
    root->right->right->left = new TreeNode(14);
    root->right->right->right = new TreeNode(15);

    // print constructed binary tree
    printTree(root, nullptr, false);

    return 0;
}

$0
endsnippet
######################################################################
#  graph                                                             #
######################################################################

